#ifndef _INC_ZIGBEE_H
#define _INC_ZIGBEE_H
/*
Code automatically generated by asn1scc tool
Date was: 5/31/2012
Time was: 20:57:25
*/

#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef struct {
    flag reportOnExistingNodes;
    flag reportAnnouncements;
    flag reportLeave;
    struct {
        unsigned int reportOnExistingNodes:1;
        unsigned int reportAnnouncements:1;
        unsigned int reportLeave:1;
    } exist;
} StartNodeDiscoveryParams;

#define StartNodeDiscoveryParams_REQUIRED_BYTES_FOR_ENCODING        1
#define StartNodeDiscoveryParams_REQUIRED_BITS_FOR_ENCODING        6
#define StartNodeDiscoveryParams_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define StartNodeDiscoveryParams_REQUIRED_BITS_FOR_ACN_ENCODING        6
#define StartNodeDiscoveryParams_REQUIRED_BYTES_FOR_XER_ENCODING       209


void StartNodeDiscoveryParams_Initialize(StartNodeDiscoveryParams* pVal);
flag StartNodeDiscoveryParams_IsConstraintValid(const StartNodeDiscoveryParams* val, int* pErrCode);
flag StartNodeDiscoveryParams_XER_Encode(const StartNodeDiscoveryParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag StartNodeDiscoveryParams_XER_Decode(StartNodeDiscoveryParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag StartNodeDiscoveryParams_BER_Encode(const StartNodeDiscoveryParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag StartNodeDiscoveryParams_BER_Decode(StartNodeDiscoveryParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef enum {
    mac_level = 1,
    nwk_level = 2,
    intrp_level = 3,
    aps_level = 4
} FilterLevelSpec;

#define FilterLevelSpec_REQUIRED_BYTES_FOR_ENCODING        1
#define FilterLevelSpec_REQUIRED_BITS_FOR_ENCODING        2
#define FilterLevelSpec_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define FilterLevelSpec_REQUIRED_BITS_FOR_ACN_ENCODING        2
#define FilterLevelSpec_REQUIRED_BYTES_FOR_XER_ENCODING       60

#ifndef ERR_FilterLevelSpec_unknown_enumeration_value 
#define ERR_FilterLevelSpec_unknown_enumeration_value		1000 /* invalid enumeration value */
#endif

void FilterLevelSpec_Initialize(FilterLevelSpec* pVal);
flag FilterLevelSpec_IsConstraintValid(const FilterLevelSpec* val, int* pErrCode);
flag FilterLevelSpec_XER_Encode(const FilterLevelSpec* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag FilterLevelSpec_XER_Decode(FilterLevelSpec* pVal, ByteStream* pByteStrm, int* pErrCode);
flag FilterLevelSpec_BER_Encode(const FilterLevelSpec* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag FilterLevelSpec_BER_Decode(FilterLevelSpec* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    
    byte arr[1];
} PowerSources;

#define PowerSources_REQUIRED_BYTES_FOR_ENCODING        1
#define PowerSources_REQUIRED_BITS_FOR_ENCODING        4
#define PowerSources_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define PowerSources_REQUIRED_BITS_FOR_ACN_ENCODING        4
#define PowerSources_REQUIRED_BYTES_FOR_XER_ENCODING       61

#ifndef ERR_PowerSources 
#define ERR_PowerSources		1001 /* (SIZE (4)) */
#endif

void PowerSources_Initialize(PowerSources* pVal);
flag PowerSources_IsConstraintValid(const PowerSources* val, int* pErrCode);
flag PowerSources_XER_Encode(const PowerSources* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag PowerSources_XER_Decode(PowerSources* pVal, ByteStream* pByteStrm, int* pErrCode);
flag PowerSources_BER_Encode(const PowerSources* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag PowerSources_BER_Decode(PowerSources* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    long nCount; 
        
    byte arr[16];
} CallbackDest;

#define CallbackDest_REQUIRED_BYTES_FOR_ENCODING        17
#define CallbackDest_REQUIRED_BITS_FOR_ENCODING        133
#define CallbackDest_REQUIRED_BYTES_FOR_ACN_ENCODING       17
#define CallbackDest_REQUIRED_BITS_FOR_ACN_ENCODING        133
#define CallbackDest_REQUIRED_BYTES_FOR_XER_ENCODING       61

#ifndef ERR_CallbackDest 
#define ERR_CallbackDest		1002 /* (SIZE (0..16)) */
#endif

void CallbackDest_Initialize(CallbackDest* pVal);
flag CallbackDest_IsConstraintValid(const CallbackDest* val, int* pErrCode);
flag CallbackDest_XER_Encode(const CallbackDest* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag CallbackDest_XER_Decode(CallbackDest* pVal, ByteStream* pByteStrm, int* pErrCode);
flag CallbackDest_BER_Encode(const CallbackDest* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag CallbackDest_BER_Decode(CallbackDest* pVal, ByteStream* pByteStrm, int* pErrCode);

/*params*/
typedef enum {
    decodeMACBit = 0,
    decodeNWKBit = 1,
    decodeInterPANBit = 2,
    decodeAPSBit = 3,
    decodeZCLBit = 4,
    decodeZDPBit = 5
} ActionDecodeSpec;

#define ActionDecodeSpec_REQUIRED_BYTES_FOR_ENCODING        1
#define ActionDecodeSpec_REQUIRED_BITS_FOR_ENCODING        3
#define ActionDecodeSpec_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define ActionDecodeSpec_REQUIRED_BITS_FOR_ACN_ENCODING        3
#define ActionDecodeSpec_REQUIRED_BYTES_FOR_XER_ENCODING       74

#ifndef ERR_ActionDecodeSpec_unknown_enumeration_value 
#define ERR_ActionDecodeSpec_unknown_enumeration_value		1003 /* invalid enumeration value */
#endif

void ActionDecodeSpec_Initialize(ActionDecodeSpec* pVal);
flag ActionDecodeSpec_IsConstraintValid(const ActionDecodeSpec* val, int* pErrCode);
flag ActionDecodeSpec_XER_Encode(const ActionDecodeSpec* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ActionDecodeSpec_XER_Decode(ActionDecodeSpec* pVal, ByteStream* pByteStrm, int* pErrCode);
flag ActionDecodeSpec_BER_Encode(const ActionDecodeSpec* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ActionDecodeSpec_BER_Decode(ActionDecodeSpec* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef enum {
    polled = 0,
    grip = 1,
    soap = 2,
    rest = 3
} ActionForwardSpec;

#define ActionForwardSpec_REQUIRED_BYTES_FOR_ENCODING        1
#define ActionForwardSpec_REQUIRED_BITS_FOR_ENCODING        2
#define ActionForwardSpec_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define ActionForwardSpec_REQUIRED_BITS_FOR_ACN_ENCODING        2
#define ActionForwardSpec_REQUIRED_BYTES_FOR_XER_ENCODING       54

#ifndef ERR_ActionForwardSpec_unknown_enumeration_value 
#define ERR_ActionForwardSpec_unknown_enumeration_value		1004 /* invalid enumeration value */
#endif

void ActionForwardSpec_Initialize(ActionForwardSpec* pVal);
flag ActionForwardSpec_IsConstraintValid(const ActionForwardSpec* val, int* pErrCode);
flag ActionForwardSpec_XER_Encode(const ActionForwardSpec* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ActionForwardSpec_XER_Decode(ActionForwardSpec* pVal, ByteStream* pByteStrm, int* pErrCode);
flag ActionForwardSpec_BER_Encode(const ActionForwardSpec* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ActionForwardSpec_BER_Decode(ActionForwardSpec* pVal, ByteStream* pByteStrm, int* pErrCode);

/*Order of transmission is same as*/
typedef struct {
    
    byte arr[8];
} ZigBeeIEEEAddress;

#define ZigBeeIEEEAddress_REQUIRED_BYTES_FOR_ENCODING        8
#define ZigBeeIEEEAddress_REQUIRED_BITS_FOR_ENCODING        64
#define ZigBeeIEEEAddress_REQUIRED_BYTES_FOR_ACN_ENCODING       8
#define ZigBeeIEEEAddress_REQUIRED_BITS_FOR_ACN_ENCODING        64
#define ZigBeeIEEEAddress_REQUIRED_BYTES_FOR_XER_ENCODING       55

#ifndef ERR_ZigBeeIEEEAddress 
#define ERR_ZigBeeIEEEAddress		1005 /* (SIZE (8)) */
#endif

void ZigBeeIEEEAddress_Initialize(ZigBeeIEEEAddress* pVal);
flag ZigBeeIEEEAddress_IsConstraintValid(const ZigBeeIEEEAddress* val, int* pErrCode);
flag ZigBeeIEEEAddress_XER_Encode(const ZigBeeIEEEAddress* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ZigBeeIEEEAddress_XER_Decode(ZigBeeIEEEAddress* pVal, ByteStream* pByteStrm, int* pErrCode);
flag ZigBeeIEEEAddress_BER_Encode(const ZigBeeIEEEAddress* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ZigBeeIEEEAddress_BER_Decode(ZigBeeIEEEAddress* pVal, ByteStream* pByteStrm, int* pErrCode);

/*defined in ZigBee spec*/
typedef struct {
    
    byte arr[8];
} ZigBeeExtendedPanId;

#define ZigBeeExtendedPanId_REQUIRED_BYTES_FOR_ENCODING        8
#define ZigBeeExtendedPanId_REQUIRED_BITS_FOR_ENCODING        64
#define ZigBeeExtendedPanId_REQUIRED_BYTES_FOR_ACN_ENCODING       8
#define ZigBeeExtendedPanId_REQUIRED_BITS_FOR_ACN_ENCODING        64
#define ZigBeeExtendedPanId_REQUIRED_BYTES_FOR_XER_ENCODING       59

#ifndef ERR_ZigBeeExtendedPanId 
#define ERR_ZigBeeExtendedPanId		1006 /* (SIZE (8)) */
#endif

void ZigBeeExtendedPanId_Initialize(ZigBeeExtendedPanId* pVal);
flag ZigBeeExtendedPanId_IsConstraintValid(const ZigBeeExtendedPanId* val, int* pErrCode);
flag ZigBeeExtendedPanId_XER_Encode(const ZigBeeExtendedPanId* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ZigBeeExtendedPanId_XER_Decode(ZigBeeExtendedPanId* pVal, ByteStream* pByteStrm, int* pErrCode);
flag ZigBeeExtendedPanId_BER_Encode(const ZigBeeExtendedPanId* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ZigBeeExtendedPanId_BER_Decode(ZigBeeExtendedPanId* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    
    byte arr[16];
} ZigBeeSecurityKey;

#define ZigBeeSecurityKey_REQUIRED_BYTES_FOR_ENCODING        16
#define ZigBeeSecurityKey_REQUIRED_BITS_FOR_ENCODING        128
#define ZigBeeSecurityKey_REQUIRED_BYTES_FOR_ACN_ENCODING       16
#define ZigBeeSecurityKey_REQUIRED_BITS_FOR_ACN_ENCODING        128
#define ZigBeeSecurityKey_REQUIRED_BYTES_FOR_XER_ENCODING       71

#ifndef ERR_ZigBeeSecurityKey 
#define ERR_ZigBeeSecurityKey		1007 /* (SIZE (16)) */
#endif

void ZigBeeSecurityKey_Initialize(ZigBeeSecurityKey* pVal);
flag ZigBeeSecurityKey_IsConstraintValid(const ZigBeeSecurityKey* val, int* pErrCode);
flag ZigBeeSecurityKey_XER_Encode(const ZigBeeSecurityKey* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ZigBeeSecurityKey_XER_Decode(ZigBeeSecurityKey* pVal, ByteStream* pByteStrm, int* pErrCode);
flag ZigBeeSecurityKey_BER_Encode(const ZigBeeSecurityKey* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ZigBeeSecurityKey_BER_Decode(ZigBeeSecurityKey* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    long nCount; 
        
    byte arr[16];
} ZigBeeAliasAddress;

#define ZigBeeAliasAddress_REQUIRED_BYTES_FOR_ENCODING        17
#define ZigBeeAliasAddress_REQUIRED_BITS_FOR_ENCODING        133
#define ZigBeeAliasAddress_REQUIRED_BYTES_FOR_ACN_ENCODING       17
#define ZigBeeAliasAddress_REQUIRED_BITS_FOR_ACN_ENCODING        133
#define ZigBeeAliasAddress_REQUIRED_BYTES_FOR_XER_ENCODING       73

#ifndef ERR_ZigBeeAliasAddress 
#define ERR_ZigBeeAliasAddress		1008 /* (SIZE (0..16)) */
#endif

void ZigBeeAliasAddress_Initialize(ZigBeeAliasAddress* pVal);
flag ZigBeeAliasAddress_IsConstraintValid(const ZigBeeAliasAddress* val, int* pErrCode);
flag ZigBeeAliasAddress_XER_Encode(const ZigBeeAliasAddress* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ZigBeeAliasAddress_XER_Decode(ZigBeeAliasAddress* pVal, ByteStream* pByteStrm, int* pErrCode);
flag ZigBeeAliasAddress_BER_Encode(const ZigBeeAliasAddress* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ZigBeeAliasAddress_BER_Decode(ZigBeeAliasAddress* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef enum {
    all = 0,
    zdp = 1,
    zcl = 2,
    discovery = 10,
    binding = 11,
    network_management = 12
} ZigBeeClusterGroup;

#define ZigBeeClusterGroup_REQUIRED_BYTES_FOR_ENCODING        1
#define ZigBeeClusterGroup_REQUIRED_BITS_FOR_ENCODING        3
#define ZigBeeClusterGroup_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define ZigBeeClusterGroup_REQUIRED_BITS_FOR_ACN_ENCODING        3
#define ZigBeeClusterGroup_REQUIRED_BYTES_FOR_XER_ENCODING       80

#ifndef ERR_ZigBeeClusterGroup_unknown_enumeration_value 
#define ERR_ZigBeeClusterGroup_unknown_enumeration_value		1009 /* invalid enumeration value */
#endif

void ZigBeeClusterGroup_Initialize(ZigBeeClusterGroup* pVal);
flag ZigBeeClusterGroup_IsConstraintValid(const ZigBeeClusterGroup* val, int* pErrCode);
flag ZigBeeClusterGroup_XER_Encode(const ZigBeeClusterGroup* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ZigBeeClusterGroup_XER_Decode(ZigBeeClusterGroup* pVal, ByteStream* pByteStrm, int* pErrCode);
flag ZigBeeClusterGroup_BER_Encode(const ZigBeeClusterGroup* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ZigBeeClusterGroup_BER_Decode(ZigBeeClusterGroup* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef enum {
    keepChildren = 0,
    removeChildren = 1
} RemoveChildren;

#define RemoveChildren_REQUIRED_BYTES_FOR_ENCODING        1
#define RemoveChildren_REQUIRED_BITS_FOR_ENCODING        1
#define RemoveChildren_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define RemoveChildren_REQUIRED_BITS_FOR_ACN_ENCODING        1
#define RemoveChildren_REQUIRED_BYTES_FOR_XER_ENCODING       64

#ifndef ERR_RemoveChildren_unknown_enumeration_value 
#define ERR_RemoveChildren_unknown_enumeration_value		1010 /* invalid enumeration value */
#endif

void RemoveChildren_Initialize(RemoveChildren* pVal);
flag RemoveChildren_IsConstraintValid(const RemoveChildren* val, int* pErrCode);
flag RemoveChildren_XER_Encode(const RemoveChildren* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag RemoveChildren_XER_Decode(RemoveChildren* pVal, ByteStream* pByteStrm, int* pErrCode);
flag RemoveChildren_BER_Encode(const RemoveChildren* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag RemoveChildren_BER_Decode(RemoveChildren* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef enum {
    no_rejoin = 0,
    rejoin = 1
} Rejoin;

#define Rejoin_REQUIRED_BYTES_FOR_ENCODING        1
#define Rejoin_REQUIRED_BITS_FOR_ENCODING        1
#define Rejoin_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define Rejoin_REQUIRED_BITS_FOR_ACN_ENCODING        1
#define Rejoin_REQUIRED_BYTES_FOR_XER_ENCODING       38

#ifndef ERR_Rejoin_unknown_enumeration_value 
#define ERR_Rejoin_unknown_enumeration_value		1011 /* invalid enumeration value */
#endif

void Rejoin_Initialize(Rejoin* pVal);
flag Rejoin_IsConstraintValid(const Rejoin* val, int* pErrCode);
flag Rejoin_XER_Encode(const Rejoin* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag Rejoin_XER_Decode(Rejoin* pVal, ByteStream* pByteStrm, int* pErrCode);
flag Rejoin_BER_Encode(const Rejoin* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag Rejoin_BER_Decode(Rejoin* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef enum {
    currentDevice = 0,
    zc = 1,
    zr = 2,
    zed = 3
} DeviceType;

#define DeviceType_REQUIRED_BYTES_FOR_ENCODING        1
#define DeviceType_REQUIRED_BITS_FOR_ENCODING        2
#define DeviceType_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define DeviceType_REQUIRED_BITS_FOR_ACN_ENCODING        2
#define DeviceType_REQUIRED_BYTES_FOR_XER_ENCODING       54

#ifndef ERR_DeviceType_unknown_enumeration_value 
#define ERR_DeviceType_unknown_enumeration_value		1012 /* invalid enumeration value */
#endif

void DeviceType_Initialize(DeviceType* pVal);
flag DeviceType_IsConstraintValid(const DeviceType* val, int* pErrCode);
flag DeviceType_XER_Encode(const DeviceType* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag DeviceType_XER_Decode(DeviceType* pVal, ByteStream* pByteStrm, int* pErrCode);
flag DeviceType_BER_Encode(const DeviceType* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag DeviceType_BER_Decode(DeviceType* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef asn1SccSint Integer32;

#define Integer32_REQUIRED_BYTES_FOR_ENCODING        4
#define Integer32_REQUIRED_BITS_FOR_ENCODING        32
#define Integer32_REQUIRED_BYTES_FOR_ACN_ENCODING       4
#define Integer32_REQUIRED_BITS_FOR_ACN_ENCODING        32
#define Integer32_REQUIRED_BYTES_FOR_XER_ENCODING       43

#ifndef ERR_Integer32 
#define ERR_Integer32		1013 /* (0..4294967295) */
#endif

void Integer32_Initialize(Integer32* pVal);
flag Integer32_IsConstraintValid(const Integer32* val, int* pErrCode);
flag Integer32_XER_Encode(const Integer32* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag Integer32_XER_Decode(Integer32* pVal, ByteStream* pByteStrm, int* pErrCode);
flag Integer32_BER_Encode(const Integer32* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag Integer32_BER_Decode(Integer32* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef asn1SccSint Integer16;

#define Integer16_REQUIRED_BYTES_FOR_ENCODING        2
#define Integer16_REQUIRED_BITS_FOR_ENCODING        16
#define Integer16_REQUIRED_BYTES_FOR_ACN_ENCODING       2
#define Integer16_REQUIRED_BITS_FOR_ACN_ENCODING        16
#define Integer16_REQUIRED_BYTES_FOR_XER_ENCODING       43

#ifndef ERR_Integer16 
#define ERR_Integer16		1014 /* (0..65535) */
#endif

void Integer16_Initialize(Integer16* pVal);
flag Integer16_IsConstraintValid(const Integer16* val, int* pErrCode);
flag Integer16_XER_Encode(const Integer16* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag Integer16_XER_Decode(Integer16* pVal, ByteStream* pByteStrm, int* pErrCode);
flag Integer16_BER_Encode(const Integer16* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag Integer16_BER_Decode(Integer16* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef asn1SccSint Integer8;

#define Integer8_REQUIRED_BYTES_FOR_ENCODING        1
#define Integer8_REQUIRED_BITS_FOR_ENCODING        8
#define Integer8_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define Integer8_REQUIRED_BITS_FOR_ACN_ENCODING        8
#define Integer8_REQUIRED_BYTES_FOR_XER_ENCODING       41

#ifndef ERR_Integer8 
#define ERR_Integer8		1015 /* (0..255) */
#endif

void Integer8_Initialize(Integer8* pVal);
flag Integer8_IsConstraintValid(const Integer8* val, int* pErrCode);
flag Integer8_XER_Encode(const Integer8* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag Integer8_XER_Decode(Integer8* pVal, ByteStream* pByteStrm, int* pErrCode);
flag Integer8_BER_Encode(const Integer8* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag Integer8_BER_Decode(Integer8* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    enum {
        SimpleType_NONE,
        integer8_PRESENT,
        integer16_PRESENT,
        integer32_PRESENT,
        flag_PRESENT,
        octetString_PRESENT 
    } kind;
    union {
        Integer8 integer8;
        Integer16 integer16;
        Integer32 integer32;
        flag flag;
        struct {
            long nCount; 
                
            byte arr[16];
        } octetString;
    } u; 
} SimpleType;

#define SimpleType_REQUIRED_BYTES_FOR_ENCODING        17
#define SimpleType_REQUIRED_BITS_FOR_ENCODING        136
#define SimpleType_REQUIRED_BYTES_FOR_ACN_ENCODING       17
#define SimpleType_REQUIRED_BITS_FOR_ACN_ENCODING        136
#define SimpleType_REQUIRED_BYTES_FOR_XER_ENCODING       84

#ifndef ERR_SimpleType_unknown_choice_index 
#define ERR_SimpleType_unknown_choice_index		1016 /*  */
#endif
#ifndef ERR_SimpleType_octetString 
#define ERR_SimpleType_octetString		1017 /* (SIZE (0..16)) */
#endif

void SimpleType_Initialize(SimpleType* pVal);
flag SimpleType_IsConstraintValid(const SimpleType* val, int* pErrCode);
flag SimpleType_XER_Encode(const SimpleType* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag SimpleType_XER_Decode(SimpleType* pVal, ByteStream* pByteStrm, int* pErrCode);
flag SimpleType_BER_Encode(const SimpleType* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag SimpleType_BER_Decode(SimpleType* pVal, ByteStream* pByteStrm, int* pErrCode);

/*Parameters structures :*/
typedef struct {
    Integer8 attributeId;
    flag useGIB;
} GetParams;

#define GetParams_REQUIRED_BYTES_FOR_ENCODING        2
#define GetParams_REQUIRED_BITS_FOR_ENCODING        9
#define GetParams_REQUIRED_BYTES_FOR_ACN_ENCODING       2
#define GetParams_REQUIRED_BITS_FOR_ACN_ENCODING        9
#define GetParams_REQUIRED_BYTES_FOR_XER_ENCODING       100


void GetParams_Initialize(GetParams* pVal);
flag GetParams_IsConstraintValid(const GetParams* val, int* pErrCode);
flag GetParams_XER_Encode(const GetParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag GetParams_XER_Decode(GetParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag GetParams_BER_Encode(const GetParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag GetParams_BER_Decode(GetParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Integer8 attributeId;
    struct {
        long nCount; 
            
        byte arr[16];
    } value;
    flag useGIB;
} SetParams;

#define SetParams_REQUIRED_BYTES_FOR_ENCODING        18
#define SetParams_REQUIRED_BITS_FOR_ENCODING        142
#define SetParams_REQUIRED_BYTES_FOR_ACN_ENCODING       18
#define SetParams_REQUIRED_BITS_FOR_ACN_ENCODING        142
#define SetParams_REQUIRED_BYTES_FOR_XER_ENCODING       147

#ifndef ERR_SetParams_value 
#define ERR_SetParams_value		1018 /* (SIZE (0..16)) */
#endif

void SetParams_Initialize(SetParams* pVal);
flag SetParams_IsConstraintValid(const SetParams* val, int* pErrCode);
flag SetParams_XER_Encode(const SetParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag SetParams_XER_Decode(SetParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag SetParams_BER_Encode(const SetParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag SetParams_BER_Decode(SetParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    ZigBeeAliasAddress aliasAddress;
    ZigBeeIEEEAddress ieeeAddress;
} CreateAliasAddressParams;

#define CreateAliasAddressParams_REQUIRED_BYTES_FOR_ENCODING        25
#define CreateAliasAddressParams_REQUIRED_BITS_FOR_ENCODING        197
#define CreateAliasAddressParams_REQUIRED_BYTES_FOR_ACN_ENCODING       25
#define CreateAliasAddressParams_REQUIRED_BITS_FOR_ACN_ENCODING        197
#define CreateAliasAddressParams_REQUIRED_BYTES_FOR_XER_ENCODING       157


void CreateAliasAddressParams_Initialize(CreateAliasAddressParams* pVal);
flag CreateAliasAddressParams_IsConstraintValid(const CreateAliasAddressParams* val, int* pErrCode);
flag CreateAliasAddressParams_XER_Encode(const CreateAliasAddressParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag CreateAliasAddressParams_XER_Decode(CreateAliasAddressParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag CreateAliasAddressParams_BER_Encode(const CreateAliasAddressParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag CreateAliasAddressParams_BER_Decode(CreateAliasAddressParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Integer32 scanned_channels;
    Integer8 scan_duration;
    Integer8 beacon_order;
    Integer8 superFrame_order;
    flag batteryLifeExtension;
} FormNetworkParams;

#define FormNetworkParams_REQUIRED_BYTES_FOR_ENCODING        8
#define FormNetworkParams_REQUIRED_BITS_FOR_ENCODING        57
#define FormNetworkParams_REQUIRED_BYTES_FOR_ACN_ENCODING       8
#define FormNetworkParams_REQUIRED_BITS_FOR_ACN_ENCODING        57
#define FormNetworkParams_REQUIRED_BYTES_FOR_XER_ENCODING       311


void FormNetworkParams_Initialize(FormNetworkParams* pVal);
flag FormNetworkParams_IsConstraintValid(const FormNetworkParams* val, int* pErrCode);
flag FormNetworkParams_XER_Encode(const FormNetworkParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag FormNetworkParams_XER_Decode(FormNetworkParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag FormNetworkParams_BER_Encode(const FormNetworkParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag FormNetworkParams_BER_Decode(FormNetworkParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Integer8 beacon_order;
    Integer8 superFrame_order;
    flag batteryLifeExtension;
} StartRouterParams;

#define StartRouterParams_REQUIRED_BYTES_FOR_ENCODING        3
#define StartRouterParams_REQUIRED_BITS_FOR_ENCODING        17
#define StartRouterParams_REQUIRED_BYTES_FOR_ACN_ENCODING       3
#define StartRouterParams_REQUIRED_BITS_FOR_ACN_ENCODING        17
#define StartRouterParams_REQUIRED_BYTES_FOR_XER_ENCODING       203


void StartRouterParams_Initialize(StartRouterParams* pVal);
flag StartRouterParams_IsConstraintValid(const StartRouterParams* val, int* pErrCode);
flag StartRouterParams_XER_Encode(const StartRouterParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag StartRouterParams_XER_Decode(StartRouterParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag StartRouterParams_BER_Encode(const StartRouterParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag StartRouterParams_BER_Decode(StartRouterParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    ZigBeeExtendedPanId extendedPANId;
    Integer8 rejoin;
    Integer32 scanned_channels;
    Integer8 scan_duration;
    Integer8 capability_info;
    flag security_enable;
} JoinParams;

#define JoinParams_REQUIRED_BYTES_FOR_ENCODING        16
#define JoinParams_REQUIRED_BITS_FOR_ENCODING        121
#define JoinParams_REQUIRED_BYTES_FOR_ACN_ENCODING       16
#define JoinParams_REQUIRED_BITS_FOR_ACN_ENCODING        121
#define JoinParams_REQUIRED_BYTES_FOR_XER_ENCODING       320


void JoinParams_Initialize(JoinParams* pVal);
flag JoinParams_IsConstraintValid(const JoinParams* val, int* pErrCode);
flag JoinParams_XER_Encode(const JoinParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag JoinParams_XER_Decode(JoinParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag JoinParams_BER_Encode(const JoinParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag JoinParams_BER_Decode(JoinParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Integer32 scanned_channels;
    Integer8 scan_duration;
} DiscoverNetworksParams;

#define DiscoverNetworksParams_REQUIRED_BYTES_FOR_ENCODING        5
#define DiscoverNetworksParams_REQUIRED_BITS_FOR_ENCODING        40
#define DiscoverNetworksParams_REQUIRED_BYTES_FOR_ACN_ENCODING       5
#define DiscoverNetworksParams_REQUIRED_BITS_FOR_ACN_ENCODING        40
#define DiscoverNetworksParams_REQUIRED_BYTES_FOR_XER_ENCODING       157


void DiscoverNetworksParams_Initialize(DiscoverNetworksParams* pVal);
flag DiscoverNetworksParams_IsConstraintValid(const DiscoverNetworksParams* val, int* pErrCode);
flag DiscoverNetworksParams_XER_Encode(const DiscoverNetworksParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag DiscoverNetworksParams_XER_Decode(DiscoverNetworksParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag DiscoverNetworksParams_BER_Encode(const DiscoverNetworksParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag DiscoverNetworksParams_BER_Decode(DiscoverNetworksParams* pVal, ByteStream* pByteStrm, int* pErrCode);

/*Results structures :*/
typedef struct {
    Integer8 versionIdentifier;
    Integer8 featureSetIdentifier;
    Integer16 rpcProtocols;
    struct {
        long nCount; 
            
        byte arr[16];
    } manufacturerVersion;
} GetVersionResults;

#define GetVersionResults_REQUIRED_BYTES_FOR_ENCODING        21
#define GetVersionResults_REQUIRED_BITS_FOR_ENCODING        165
#define GetVersionResults_REQUIRED_BYTES_FOR_ACN_ENCODING       21
#define GetVersionResults_REQUIRED_BITS_FOR_ACN_ENCODING        165
#define GetVersionResults_REQUIRED_BYTES_FOR_XER_ENCODING       287

#ifndef ERR_GetVersionResults_manufacturerVersion 
#define ERR_GetVersionResults_manufacturerVersion		1019 /* (SIZE (0..16)) */
#endif

void GetVersionResults_Initialize(GetVersionResults* pVal);
flag GetVersionResults_IsConstraintValid(const GetVersionResults* val, int* pErrCode);
flag GetVersionResults_XER_Encode(const GetVersionResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag GetVersionResults_XER_Decode(GetVersionResults* pVal, ByteStream* pByteStrm, int* pErrCode);
flag GetVersionResults_BER_Encode(const GetVersionResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag GetVersionResults_BER_Decode(GetVersionResults* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Integer8 asdu_handle;
    Integer8 confirm_status;
    struct {
        unsigned int asdu_handle:1;
        unsigned int confirm_status:1;
    } exist;
} INTRPANCommandResults;

#define INTRPANCommandResults_REQUIRED_BYTES_FOR_ENCODING        3
#define INTRPANCommandResults_REQUIRED_BITS_FOR_ENCODING        18
#define INTRPANCommandResults_REQUIRED_BYTES_FOR_ACN_ENCODING       3
#define INTRPANCommandResults_REQUIRED_BITS_FOR_ACN_ENCODING        18
#define INTRPANCommandResults_REQUIRED_BYTES_FOR_XER_ENCODING       147


void INTRPANCommandResults_Initialize(INTRPANCommandResults* pVal);
flag INTRPANCommandResults_IsConstraintValid(const INTRPANCommandResults* val, int* pErrCode);
flag INTRPANCommandResults_XER_Encode(const INTRPANCommandResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag INTRPANCommandResults_XER_Decode(INTRPANCommandResults* pVal, ByteStream* pByteStrm, int* pErrCode);
flag INTRPANCommandResults_BER_Encode(const INTRPANCommandResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag INTRPANCommandResults_BER_Decode(INTRPANCommandResults* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    ActionDecodeSpec decode;
    ActionForwardSpec forward;
} Action;

#define Action_REQUIRED_BYTES_FOR_ENCODING        1
#define Action_REQUIRED_BITS_FOR_ENCODING        5
#define Action_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define Action_REQUIRED_BITS_FOR_ACN_ENCODING        5
#define Action_REQUIRED_BYTES_FOR_XER_ENCODING       105


void Action_Initialize(Action* pVal);
flag Action_IsConstraintValid(const Action* val, int* pErrCode);
flag Action_XER_Encode(const Action* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag Action_XER_Decode(Action* pVal, ByteStream* pByteStrm, int* pErrCode);
flag Action_BER_Encode(const Action* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag Action_BER_Decode(Action* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    enum {
        coordinator = 0,
        router = 1,
        endDevice = 2
    } logical_type;
    flag complex_descriptorBit;
    flag user_descriptorBit;
    struct {
        
        byte arr[1];
    } reserved;
    struct {
        
        byte arr[1];
    } aps_flags;
    struct {
        
        byte arr[1];
    } frequency_band;
    struct {
        
        byte arr[1];
    } mac_capability_flags;
    Integer16 manufacturer_code;
    Integer8 max_buffer_size;
    Integer16 max_in_transfer_size;
    struct {
        
        byte arr[2];
    } server_mask;
    Integer16 max_out_transfer_size;
    Integer8 descriptor_capability_field;
} NodeDescriptor;

#define NodeDescriptor_REQUIRED_BYTES_FOR_ENCODING        13
#define NodeDescriptor_REQUIRED_BITS_FOR_ENCODING        103
#define NodeDescriptor_REQUIRED_BYTES_FOR_ACN_ENCODING       13
#define NodeDescriptor_REQUIRED_BITS_FOR_ACN_ENCODING        103
#define NodeDescriptor_REQUIRED_BYTES_FOR_XER_ENCODING       955

#ifndef ERR_NodeDescriptor_logical_type_unknown_enumeration_value 
#define ERR_NodeDescriptor_logical_type_unknown_enumeration_value		1020 /* invalid enumeration value */
#endif
#ifndef ERR_NodeDescriptor_reserved 
#define ERR_NodeDescriptor_reserved		1021 /* (SIZE (3)) */
#endif
#ifndef ERR_NodeDescriptor_aps_flags 
#define ERR_NodeDescriptor_aps_flags		1022 /* (SIZE (3)) */
#endif
#ifndef ERR_NodeDescriptor_frequency_band 
#define ERR_NodeDescriptor_frequency_band		1023 /* (SIZE (5)) */
#endif
#ifndef ERR_NodeDescriptor_mac_capability_flags 
#define ERR_NodeDescriptor_mac_capability_flags		1024 /* (SIZE (8)) */
#endif
#ifndef ERR_NodeDescriptor_server_mask 
#define ERR_NodeDescriptor_server_mask		1025 /* (SIZE (16)) */
#endif

void NodeDescriptor_Initialize(NodeDescriptor* pVal);
flag NodeDescriptor_IsConstraintValid(const NodeDescriptor* val, int* pErrCode);
flag NodeDescriptor_XER_Encode(const NodeDescriptor* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag NodeDescriptor_XER_Decode(NodeDescriptor* pVal, ByteStream* pByteStrm, int* pErrCode);
flag NodeDescriptor_BER_Encode(const NodeDescriptor* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag NodeDescriptor_BER_Decode(NodeDescriptor* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    enum {
        synchronized = 0,
        seriodic = 1,
        stimulated = 2
    } current_power_mode;
    PowerSources available_power_sources;
    PowerSources current_power_source;
    enum {
        myCritical = 0,
        percent33 = 4,
        percent66 = 8,
        percent100 = 12
    } current_power_source_level;
} NodePowerDescriptor;

#define NodePowerDescriptor_REQUIRED_BYTES_FOR_ENCODING        2
#define NodePowerDescriptor_REQUIRED_BITS_FOR_ENCODING        12
#define NodePowerDescriptor_REQUIRED_BYTES_FOR_ACN_ENCODING       2
#define NodePowerDescriptor_REQUIRED_BITS_FOR_ACN_ENCODING        12
#define NodePowerDescriptor_REQUIRED_BYTES_FOR_XER_ENCODING       351

#ifndef ERR_NodePowerDescriptor_current_power_mode_unknown_enumeration_value 
#define ERR_NodePowerDescriptor_current_power_mode_unknown_enumeration_value		1026 /* invalid enumeration value */
#endif
#ifndef ERR_NodePowerDescriptor_current_power_source_level_unknown_enumeration_value 
#define ERR_NodePowerDescriptor_current_power_source_level_unknown_enumeration_value		1027 /* invalid enumeration value */
#endif

void NodePowerDescriptor_Initialize(NodePowerDescriptor* pVal);
flag NodePowerDescriptor_IsConstraintValid(const NodePowerDescriptor* val, int* pErrCode);
flag NodePowerDescriptor_XER_Encode(const NodePowerDescriptor* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag NodePowerDescriptor_XER_Decode(NodePowerDescriptor* pVal, ByteStream* pByteStrm, int* pErrCode);
flag NodePowerDescriptor_BER_Encode(const NodePowerDescriptor* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag NodePowerDescriptor_BER_Decode(NodePowerDescriptor* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    ZigBeeExtendedPanId extended_panId;
    Integer8 logical_channel;
    Integer8 stack_profile;
    Integer8 zigbee_version;
    Integer8 beacon_order;
    Integer8 superFrame_order;
    flag permit_joining;
    flag router_capacity;
    flag endDevice_capacity;
} NetworkDescriptor;

#define NetworkDescriptor_REQUIRED_BYTES_FOR_ENCODING        14
#define NetworkDescriptor_REQUIRED_BITS_FOR_ENCODING        107
#define NetworkDescriptor_REQUIRED_BYTES_FOR_ACN_ENCODING       14
#define NetworkDescriptor_REQUIRED_BITS_FOR_ACN_ENCODING        107
#define NetworkDescriptor_REQUIRED_BYTES_FOR_XER_ENCODING       501


void NetworkDescriptor_Initialize(NetworkDescriptor* pVal);
flag NetworkDescriptor_IsConstraintValid(const NetworkDescriptor* val, int* pErrCode);
flag NetworkDescriptor_XER_Encode(const NetworkDescriptor* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag NetworkDescriptor_XER_Decode(NetworkDescriptor* pVal, ByteStream* pByteStrm, int* pErrCode);
flag NetworkDescriptor_BER_Encode(const NetworkDescriptor* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag NetworkDescriptor_BER_Decode(NetworkDescriptor* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    
    Integer16 arr[3];
} ZigBeeGroupAddressList;

#define ZigBeeGroupAddressList_REQUIRED_BYTES_FOR_ENCODING        6
#define ZigBeeGroupAddressList_REQUIRED_BITS_FOR_ENCODING        48
#define ZigBeeGroupAddressList_REQUIRED_BYTES_FOR_ACN_ENCODING       6
#define ZigBeeGroupAddressList_REQUIRED_BITS_FOR_ACN_ENCODING        48
#define ZigBeeGroupAddressList_REQUIRED_BYTES_FOR_XER_ENCODING       178

#ifndef ERR_ZigBeeGroupAddressList 
#define ERR_ZigBeeGroupAddressList		1028 /* (SIZE (3)) */
#endif

void ZigBeeGroupAddressList_Initialize(ZigBeeGroupAddressList* pVal);
flag ZigBeeGroupAddressList_IsConstraintValid(const ZigBeeGroupAddressList* val, int* pErrCode);
flag ZigBeeGroupAddressList_XER_Encode(const ZigBeeGroupAddressList* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ZigBeeGroupAddressList_XER_Decode(ZigBeeGroupAddressList* pVal, ByteStream* pByteStrm, int* pErrCode);
flag ZigBeeGroupAddressList_BER_Encode(const ZigBeeGroupAddressList* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ZigBeeGroupAddressList_BER_Decode(ZigBeeGroupAddressList* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    
    NetworkDescriptor arr[3];
} NetworkDescriptorList;

#define NetworkDescriptorList_REQUIRED_BYTES_FOR_ENCODING        41
#define NetworkDescriptorList_REQUIRED_BITS_FOR_ENCODING        321
#define NetworkDescriptorList_REQUIRED_BYTES_FOR_ACN_ENCODING       41
#define NetworkDescriptorList_REQUIRED_BITS_FOR_ACN_ENCODING        321
#define NetworkDescriptorList_REQUIRED_BYTES_FOR_XER_ENCODING       1550

#ifndef ERR_NetworkDescriptorList 
#define ERR_NetworkDescriptorList		1029 /* (SIZE (3)) */
#endif

void NetworkDescriptorList_Initialize(NetworkDescriptorList* pVal);
flag NetworkDescriptorList_IsConstraintValid(const NetworkDescriptorList* val, int* pErrCode);
flag NetworkDescriptorList_XER_Encode(const NetworkDescriptorList* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag NetworkDescriptorList_XER_Decode(NetworkDescriptorList* pVal, ByteStream* pByteStrm, int* pErrCode);
flag NetworkDescriptorList_BER_Encode(const NetworkDescriptorList* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag NetworkDescriptorList_BER_Decode(NetworkDescriptorList* pVal, ByteStream* pByteStrm, int* pErrCode);

/*general proc*/
typedef Integer32 Timeout;

#define Timeout_REQUIRED_BYTES_FOR_ENCODING        3
#define Timeout_REQUIRED_BITS_FOR_ENCODING        20
#define Timeout_REQUIRED_BYTES_FOR_ACN_ENCODING       3
#define Timeout_REQUIRED_BITS_FOR_ACN_ENCODING        20
#define Timeout_REQUIRED_BYTES_FOR_XER_ENCODING       39

#ifndef ERR_Timeout 
#define ERR_Timeout		1030 /* (0..4294967295)(0..600000) */
#endif

void Timeout_Initialize(Timeout* pVal);
flag Timeout_IsConstraintValid(const Timeout* val, int* pErrCode);
flag Timeout_XER_Encode(const Timeout* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag Timeout_XER_Decode(Timeout* pVal, ByteStream* pByteStrm, int* pErrCode);
flag Timeout_BER_Encode(const Timeout* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag Timeout_BER_Decode(Timeout* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef Integer32 CallbackId;

#define CallbackId_REQUIRED_BYTES_FOR_ENCODING        4
#define CallbackId_REQUIRED_BITS_FOR_ENCODING        32
#define CallbackId_REQUIRED_BYTES_FOR_ACN_ENCODING       4
#define CallbackId_REQUIRED_BITS_FOR_ACN_ENCODING        32
#define CallbackId_REQUIRED_BYTES_FOR_XER_ENCODING       45


void CallbackId_Initialize(CallbackId* pVal);
flag CallbackId_IsConstraintValid(const CallbackId* val, int* pErrCode);
flag CallbackId_XER_Encode(const CallbackId* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag CallbackId_XER_Decode(CallbackId* pVal, ByteStream* pByteStrm, int* pErrCode);
flag CallbackId_BER_Encode(const CallbackId* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag CallbackId_BER_Decode(CallbackId* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef Integer32 RequestId;

#define RequestId_REQUIRED_BYTES_FOR_ENCODING        4
#define RequestId_REQUIRED_BITS_FOR_ENCODING        32
#define RequestId_REQUIRED_BYTES_FOR_ACN_ENCODING       4
#define RequestId_REQUIRED_BITS_FOR_ACN_ENCODING        32
#define RequestId_REQUIRED_BYTES_FOR_XER_ENCODING       43


void RequestId_Initialize(RequestId* pVal);
flag RequestId_IsConstraintValid(const RequestId* val, int* pErrCode);
flag RequestId_XER_Encode(const RequestId* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag RequestId_XER_Decode(RequestId* pVal, ByteStream* pByteStrm, int* pErrCode);
flag RequestId_BER_Encode(const RequestId* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag RequestId_BER_Decode(RequestId* pVal, ByteStream* pByteStrm, int* pErrCode);

/*ActionForwardSpec ::= CallbackDest*/
typedef Integer16 ZigBeeNetworkAddress;

#define ZigBeeNetworkAddress_REQUIRED_BYTES_FOR_ENCODING        2
#define ZigBeeNetworkAddress_REQUIRED_BITS_FOR_ENCODING        16
#define ZigBeeNetworkAddress_REQUIRED_BYTES_FOR_ACN_ENCODING       2
#define ZigBeeNetworkAddress_REQUIRED_BITS_FOR_ACN_ENCODING        16
#define ZigBeeNetworkAddress_REQUIRED_BYTES_FOR_XER_ENCODING       65


void ZigBeeNetworkAddress_Initialize(ZigBeeNetworkAddress* pVal);
flag ZigBeeNetworkAddress_IsConstraintValid(const ZigBeeNetworkAddress* val, int* pErrCode);
flag ZigBeeNetworkAddress_XER_Encode(const ZigBeeNetworkAddress* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ZigBeeNetworkAddress_XER_Decode(ZigBeeNetworkAddress* pVal, ByteStream* pByteStrm, int* pErrCode);
flag ZigBeeNetworkAddress_BER_Encode(const ZigBeeNetworkAddress* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ZigBeeNetworkAddress_BER_Decode(ZigBeeNetworkAddress* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef Integer8 ZigBeeEndpoint;

#define ZigBeeEndpoint_REQUIRED_BYTES_FOR_ENCODING        1
#define ZigBeeEndpoint_REQUIRED_BITS_FOR_ENCODING        8
#define ZigBeeEndpoint_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define ZigBeeEndpoint_REQUIRED_BITS_FOR_ACN_ENCODING        8
#define ZigBeeEndpoint_REQUIRED_BYTES_FOR_XER_ENCODING       53


void ZigBeeEndpoint_Initialize(ZigBeeEndpoint* pVal);
flag ZigBeeEndpoint_IsConstraintValid(const ZigBeeEndpoint* val, int* pErrCode);
flag ZigBeeEndpoint_XER_Encode(const ZigBeeEndpoint* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ZigBeeEndpoint_XER_Decode(ZigBeeEndpoint* pVal, ByteStream* pByteStrm, int* pErrCode);
flag ZigBeeEndpoint_BER_Encode(const ZigBeeEndpoint* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ZigBeeEndpoint_BER_Decode(ZigBeeEndpoint* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef Integer16 ZigBeeClusterID;

#define ZigBeeClusterID_REQUIRED_BYTES_FOR_ENCODING        2
#define ZigBeeClusterID_REQUIRED_BITS_FOR_ENCODING        16
#define ZigBeeClusterID_REQUIRED_BYTES_FOR_ACN_ENCODING       2
#define ZigBeeClusterID_REQUIRED_BITS_FOR_ACN_ENCODING        16
#define ZigBeeClusterID_REQUIRED_BYTES_FOR_XER_ENCODING       55


void ZigBeeClusterID_Initialize(ZigBeeClusterID* pVal);
flag ZigBeeClusterID_IsConstraintValid(const ZigBeeClusterID* val, int* pErrCode);
flag ZigBeeClusterID_XER_Encode(const ZigBeeClusterID* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ZigBeeClusterID_XER_Decode(ZigBeeClusterID* pVal, ByteStream* pByteStrm, int* pErrCode);
flag ZigBeeClusterID_BER_Encode(const ZigBeeClusterID* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ZigBeeClusterID_BER_Decode(ZigBeeClusterID* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef Integer16 ZigBeeProfileID;

#define ZigBeeProfileID_REQUIRED_BYTES_FOR_ENCODING        2
#define ZigBeeProfileID_REQUIRED_BITS_FOR_ENCODING        16
#define ZigBeeProfileID_REQUIRED_BYTES_FOR_ACN_ENCODING       2
#define ZigBeeProfileID_REQUIRED_BITS_FOR_ACN_ENCODING        16
#define ZigBeeProfileID_REQUIRED_BYTES_FOR_XER_ENCODING       55


void ZigBeeProfileID_Initialize(ZigBeeProfileID* pVal);
flag ZigBeeProfileID_IsConstraintValid(const ZigBeeProfileID* val, int* pErrCode);
flag ZigBeeProfileID_XER_Encode(const ZigBeeProfileID* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ZigBeeProfileID_XER_Decode(ZigBeeProfileID* pVal, ByteStream* pByteStrm, int* pErrCode);
flag ZigBeeProfileID_BER_Encode(const ZigBeeProfileID* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ZigBeeProfileID_BER_Decode(ZigBeeProfileID* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef Integer16 ZigBeeDeviceID;

#define ZigBeeDeviceID_REQUIRED_BYTES_FOR_ENCODING        2
#define ZigBeeDeviceID_REQUIRED_BITS_FOR_ENCODING        16
#define ZigBeeDeviceID_REQUIRED_BYTES_FOR_ACN_ENCODING       2
#define ZigBeeDeviceID_REQUIRED_BITS_FOR_ACN_ENCODING        16
#define ZigBeeDeviceID_REQUIRED_BYTES_FOR_XER_ENCODING       53


void ZigBeeDeviceID_Initialize(ZigBeeDeviceID* pVal);
flag ZigBeeDeviceID_IsConstraintValid(const ZigBeeDeviceID* val, int* pErrCode);
flag ZigBeeDeviceID_XER_Encode(const ZigBeeDeviceID* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ZigBeeDeviceID_XER_Decode(ZigBeeDeviceID* pVal, ByteStream* pByteStrm, int* pErrCode);
flag ZigBeeDeviceID_BER_Encode(const ZigBeeDeviceID* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ZigBeeDeviceID_BER_Decode(ZigBeeDeviceID* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef Integer8 EnergyMeasurements;

#define EnergyMeasurements_REQUIRED_BYTES_FOR_ENCODING        1
#define EnergyMeasurements_REQUIRED_BITS_FOR_ENCODING        8
#define EnergyMeasurements_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define EnergyMeasurements_REQUIRED_BITS_FOR_ACN_ENCODING        8
#define EnergyMeasurements_REQUIRED_BYTES_FOR_XER_ENCODING       61


void EnergyMeasurements_Initialize(EnergyMeasurements* pVal);
flag EnergyMeasurements_IsConstraintValid(const EnergyMeasurements* val, int* pErrCode);
flag EnergyMeasurements_XER_Encode(const EnergyMeasurements* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag EnergyMeasurements_XER_Decode(EnergyMeasurements* pVal, ByteStream* pByteStrm, int* pErrCode);
flag EnergyMeasurements_BER_Encode(const EnergyMeasurements* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag EnergyMeasurements_BER_Decode(EnergyMeasurements* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    enum {
        DestinationAddress_NONE,
        alias_address_PRESENT,
        short_address_PRESENT,
        ieee_address_PRESENT 
    } kind;
    union {
        ZigBeeAliasAddress alias_address;
        ZigBeeNetworkAddress short_address;
        ZigBeeIEEEAddress ieee_address;
    } u; 
} DestinationAddress;

#define DestinationAddress_REQUIRED_BYTES_FOR_ENCODING        17
#define DestinationAddress_REQUIRED_BITS_FOR_ENCODING        135
#define DestinationAddress_REQUIRED_BYTES_FOR_ACN_ENCODING       17
#define DestinationAddress_REQUIRED_BITS_FOR_ACN_ENCODING        135
#define DestinationAddress_REQUIRED_BYTES_FOR_XER_ENCODING       104

#ifndef ERR_DestinationAddress_unknown_choice_index 
#define ERR_DestinationAddress_unknown_choice_index		1031 /*  */
#endif

void DestinationAddress_Initialize(DestinationAddress* pVal);
flag DestinationAddress_IsConstraintValid(const DestinationAddress* val, int* pErrCode);
flag DestinationAddress_XER_Encode(const DestinationAddress* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag DestinationAddress_XER_Decode(DestinationAddress* pVal, ByteStream* pByteStrm, int* pErrCode);
flag DestinationAddress_BER_Encode(const DestinationAddress* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag DestinationAddress_BER_Decode(DestinationAddress* pVal, ByteStream* pByteStrm, int* pErrCode);

/*results*/
typedef Integer8 Status8;

#define Status8_REQUIRED_BYTES_FOR_ENCODING        1
#define Status8_REQUIRED_BITS_FOR_ENCODING        8
#define Status8_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define Status8_REQUIRED_BITS_FOR_ACN_ENCODING        8
#define Status8_REQUIRED_BYTES_FOR_XER_ENCODING       39


void Status8_Initialize(Status8* pVal);
flag Status8_IsConstraintValid(const Status8* val, int* pErrCode);
flag Status8_XER_Encode(const Status8* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag Status8_XER_Decode(Status8* pVal, ByteStream* pByteStrm, int* pErrCode);
flag Status8_BER_Encode(const Status8* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag Status8_BER_Decode(Status8* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef Integer32 TimeStamp;

#define TimeStamp_REQUIRED_BYTES_FOR_ENCODING        4
#define TimeStamp_REQUIRED_BITS_FOR_ENCODING        32
#define TimeStamp_REQUIRED_BYTES_FOR_ACN_ENCODING       4
#define TimeStamp_REQUIRED_BITS_FOR_ACN_ENCODING        32
#define TimeStamp_REQUIRED_BYTES_FOR_XER_ENCODING       43


void TimeStamp_Initialize(TimeStamp* pVal);
flag TimeStamp_IsConstraintValid(const TimeStamp* val, int* pErrCode);
flag TimeStamp_XER_Encode(const TimeStamp* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag TimeStamp_XER_Decode(TimeStamp* pVal, ByteStream* pByteStrm, int* pErrCode);
flag TimeStamp_BER_Encode(const TimeStamp* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag TimeStamp_BER_Decode(TimeStamp* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef Integer8 ZCLCommandID;

#define ZCLCommandID_REQUIRED_BYTES_FOR_ENCODING        1
#define ZCLCommandID_REQUIRED_BITS_FOR_ENCODING        8
#define ZCLCommandID_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define ZCLCommandID_REQUIRED_BITS_FOR_ACN_ENCODING        8
#define ZCLCommandID_REQUIRED_BYTES_FOR_XER_ENCODING       49


void ZCLCommandID_Initialize(ZCLCommandID* pVal);
flag ZCLCommandID_IsConstraintValid(const ZCLCommandID* val, int* pErrCode);
flag ZCLCommandID_XER_Encode(const ZCLCommandID* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ZCLCommandID_XER_Decode(ZCLCommandID* pVal, ByteStream* pByteStrm, int* pErrCode);
flag ZCLCommandID_BER_Encode(const ZCLCommandID* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ZCLCommandID_BER_Decode(ZCLCommandID* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Timeout timeout;
    CallbackDest callback_dest;
} CallbackParams;

#define CallbackParams_REQUIRED_BYTES_FOR_ENCODING        20
#define CallbackParams_REQUIRED_BITS_FOR_ENCODING        153
#define CallbackParams_REQUIRED_BYTES_FOR_ACN_ENCODING       21
#define CallbackParams_REQUIRED_BITS_FOR_ACN_ENCODING        165
#define CallbackParams_REQUIRED_BYTES_FOR_XER_ENCODING       135


void CallbackParams_Initialize(CallbackParams* pVal);
flag CallbackParams_IsConstraintValid(const CallbackParams* val, int* pErrCode);
flag CallbackParams_XER_Encode(const CallbackParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag CallbackParams_XER_Decode(CallbackParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag CallbackParams_BER_Encode(const CallbackParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag CallbackParams_BER_Decode(CallbackParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef Status8 GeneralEvthResults;

#define GeneralEvthResults_REQUIRED_BYTES_FOR_ENCODING        1
#define GeneralEvthResults_REQUIRED_BITS_FOR_ENCODING        8
#define GeneralEvthResults_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define GeneralEvthResults_REQUIRED_BITS_FOR_ACN_ENCODING        8
#define GeneralEvthResults_REQUIRED_BYTES_FOR_XER_ENCODING       61


void GeneralEvthResults_Initialize(GeneralEvthResults* pVal);
flag GeneralEvthResults_IsConstraintValid(const GeneralEvthResults* val, int* pErrCode);
flag GeneralEvthResults_XER_Encode(const GeneralEvthResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag GeneralEvthResults_XER_Decode(GeneralEvthResults* pVal, ByteStream* pByteStrm, int* pErrCode);
flag GeneralEvthResults_BER_Encode(const GeneralEvthResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag GeneralEvthResults_BER_Decode(GeneralEvthResults* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Status8 status;
    RequestId request_id;
} StatusRequestId;

#define StatusRequestId_REQUIRED_BYTES_FOR_ENCODING        5
#define StatusRequestId_REQUIRED_BITS_FOR_ENCODING        40
#define StatusRequestId_REQUIRED_BYTES_FOR_ACN_ENCODING       5
#define StatusRequestId_REQUIRED_BITS_FOR_ACN_ENCODING        40
#define StatusRequestId_REQUIRED_BYTES_FOR_XER_ENCODING       117


void StatusRequestId_Initialize(StatusRequestId* pVal);
flag StatusRequestId_IsConstraintValid(const StatusRequestId* val, int* pErrCode);
flag StatusRequestId_XER_Encode(const StatusRequestId* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag StatusRequestId_XER_Decode(StatusRequestId* pVal, ByteStream* pByteStrm, int* pErrCode);
flag StatusRequestId_BER_Encode(const StatusRequestId* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag StatusRequestId_BER_Decode(StatusRequestId* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Status8 status;
    CallbackId callback_id;
} StatusCallbackId;

#define StatusCallbackId_REQUIRED_BYTES_FOR_ENCODING        5
#define StatusCallbackId_REQUIRED_BITS_FOR_ENCODING        40
#define StatusCallbackId_REQUIRED_BYTES_FOR_ACN_ENCODING       5
#define StatusCallbackId_REQUIRED_BITS_FOR_ACN_ENCODING        40
#define StatusCallbackId_REQUIRED_BYTES_FOR_XER_ENCODING       121


void StatusCallbackId_Initialize(StatusCallbackId* pVal);
flag StatusCallbackId_IsConstraintValid(const StatusCallbackId* val, int* pErrCode);
flag StatusCallbackId_XER_Encode(const StatusCallbackId* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag StatusCallbackId_XER_Decode(StatusCallbackId* pVal, ByteStream* pByteStrm, int* pErrCode);
flag StatusCallbackId_BER_Encode(const StatusCallbackId* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag StatusCallbackId_BER_Decode(StatusCallbackId* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    RequestId requestId;
    Timeout timeout;
} UpdateTimeoutParams;

#define UpdateTimeoutParams_REQUIRED_BYTES_FOR_ENCODING        7
#define UpdateTimeoutParams_REQUIRED_BITS_FOR_ENCODING        52
#define UpdateTimeoutParams_REQUIRED_BYTES_FOR_ACN_ENCODING       8
#define UpdateTimeoutParams_REQUIRED_BITS_FOR_ACN_ENCODING        64
#define UpdateTimeoutParams_REQUIRED_BYTES_FOR_XER_ENCODING       125


void UpdateTimeoutParams_Initialize(UpdateTimeoutParams* pVal);
flag UpdateTimeoutParams_IsConstraintValid(const UpdateTimeoutParams* val, int* pErrCode);
flag UpdateTimeoutParams_XER_Encode(const UpdateTimeoutParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag UpdateTimeoutParams_XER_Decode(UpdateTimeoutParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag UpdateTimeoutParams_BER_Encode(const UpdateTimeoutParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag UpdateTimeoutParams_BER_Decode(UpdateTimeoutParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    ZigBeeNetworkAddress device_nwkAddress;
    ZigBeeIEEEAddress device_ieeeAddress;
    ZigBeeAliasAddress device_aliasAddress;
    struct {
        unsigned int device_aliasAddress:1;
    } exist;
} NodeLeaveEventParams;

#define NodeLeaveEventParams_REQUIRED_BYTES_FOR_ENCODING        27
#define NodeLeaveEventParams_REQUIRED_BITS_FOR_ENCODING        214
#define NodeLeaveEventParams_REQUIRED_BYTES_FOR_ACN_ENCODING       27
#define NodeLeaveEventParams_REQUIRED_BITS_FOR_ACN_ENCODING        214
#define NodeLeaveEventParams_REQUIRED_BYTES_FOR_XER_ENCODING       236


void NodeLeaveEventParams_Initialize(NodeLeaveEventParams* pVal);
flag NodeLeaveEventParams_IsConstraintValid(const NodeLeaveEventParams* val, int* pErrCode);
flag NodeLeaveEventParams_XER_Encode(const NodeLeaveEventParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag NodeLeaveEventParams_XER_Decode(NodeLeaveEventParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag NodeLeaveEventParams_BER_Encode(const NodeLeaveEventParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag NodeLeaveEventParams_BER_Decode(NodeLeaveEventParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    enum {
        ListAddressesParams_NONE,
        null_PRESENT,
        nwk_address_PRESENT,
        ieeeAddress_PRESENT,
        aliasAddress_PRESENT 
    } kind;
    union {
        NullType null;
        ZigBeeNetworkAddress nwk_address;
        ZigBeeIEEEAddress ieeeAddress;
        ZigBeeAliasAddress aliasAddress;
    } u; 
} ListAddressesParams;

#define ListAddressesParams_REQUIRED_BYTES_FOR_ENCODING        17
#define ListAddressesParams_REQUIRED_BITS_FOR_ENCODING        135
#define ListAddressesParams_REQUIRED_BYTES_FOR_ACN_ENCODING       17
#define ListAddressesParams_REQUIRED_BITS_FOR_ACN_ENCODING        135
#define ListAddressesParams_REQUIRED_BYTES_FOR_XER_ENCODING       104

#ifndef ERR_ListAddressesParams_unknown_choice_index 
#define ERR_ListAddressesParams_unknown_choice_index		1032 /*  */
#endif

void ListAddressesParams_Initialize(ListAddressesParams* pVal);
flag ListAddressesParams_IsConstraintValid(const ListAddressesParams* val, int* pErrCode);
flag ListAddressesParams_XER_Encode(const ListAddressesParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ListAddressesParams_XER_Decode(ListAddressesParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag ListAddressesParams_BER_Encode(const ListAddressesParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ListAddressesParams_BER_Decode(ListAddressesParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Integer8 dstAddress_mode;
    DestinationAddress dst_address;
    Integer8 txoption;
    Integer8 radius;
    ZigBeeClusterID clusterID;
    struct {
        long nCount; 
            
        byte arr[16];
    } command;
    struct {
        unsigned int dstAddress_mode:1;
        unsigned int dst_address:1;
    } exist;
} ZDPCommandParams;

#define ZDPCommandParams_REQUIRED_BYTES_FOR_ENCODING        39
#define ZDPCommandParams_REQUIRED_BITS_FOR_ENCODING        310
#define ZDPCommandParams_REQUIRED_BYTES_FOR_ACN_ENCODING       39
#define ZDPCommandParams_REQUIRED_BITS_FOR_ACN_ENCODING        310
#define ZDPCommandParams_REQUIRED_BYTES_FOR_XER_ENCODING       354

#ifndef ERR_ZDPCommandParams_command 
#define ERR_ZDPCommandParams_command		1033 /* (SIZE (0..16)) */
#endif

void ZDPCommandParams_Initialize(ZDPCommandParams* pVal);
flag ZDPCommandParams_IsConstraintValid(const ZDPCommandParams* val, int* pErrCode);
flag ZDPCommandParams_XER_Encode(const ZDPCommandParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ZDPCommandParams_XER_Decode(ZDPCommandParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag ZDPCommandParams_BER_Encode(const ZDPCommandParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ZDPCommandParams_BER_Decode(ZDPCommandParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Integer8 dstAddress_mode;
    DestinationAddress dst_address;
    ZigBeeEndpoint dst_endpoint;
    ZigBeeProfileID profileID;
    ZigBeeClusterID clusterID;
    ZigBeeEndpoint src_endpoint;
    Integer8 txoption;
    Integer8 radius;
    struct {
        long nCount; 
            
        byte arr[16];
    } zcl_header;
    struct {
        long nCount; 
            
        byte arr[16];
    } zcl_payload;
    struct {
        unsigned int dstAddress_mode:1;
        unsigned int dst_address:1;
        unsigned int dst_endpoint:1;
        unsigned int profileID:1;
        unsigned int src_endpoint:1;
        unsigned int radius:1;
    } exist;
} ZCLCommandParams;

#define ZCLCommandParams_REQUIRED_BYTES_FOR_ENCODING        60
#define ZCLCommandParams_REQUIRED_BITS_FOR_ENCODING        479
#define ZCLCommandParams_REQUIRED_BYTES_FOR_ACN_ENCODING       60
#define ZCLCommandParams_REQUIRED_BITS_FOR_ACN_ENCODING        479
#define ZCLCommandParams_REQUIRED_BYTES_FOR_XER_ENCODING       560

#ifndef ERR_ZCLCommandParams_zcl_header 
#define ERR_ZCLCommandParams_zcl_header		1034 /* (SIZE (0..16)) */
#endif
#ifndef ERR_ZCLCommandParams_zcl_payload 
#define ERR_ZCLCommandParams_zcl_payload		1035 /* (SIZE (0..16)) */
#endif

void ZCLCommandParams_Initialize(ZCLCommandParams* pVal);
flag ZCLCommandParams_IsConstraintValid(const ZCLCommandParams* val, int* pErrCode);
flag ZCLCommandParams_XER_Encode(const ZCLCommandParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ZCLCommandParams_XER_Decode(ZCLCommandParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag ZCLCommandParams_BER_Encode(const ZCLCommandParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ZCLCommandParams_BER_Decode(ZCLCommandParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Integer8 dstAddress_mode;
    DestinationAddress dst_address;
    ZigBeeEndpoint dst_endpoint;
    ZigBeeEndpoint src_endpoint;
    /*--profileID ZigBeeProfileID , 
    */ZigBeeClusterID clusterID;
    Integer8 txoption;
    Integer8 radius;
    Integer8 dataLength;
    struct {
        long nCount; 
            
        byte arr[16];
    } data;
    struct {
        unsigned int dstAddress_mode:1;
        unsigned int dst_address:1;
        unsigned int dst_endpoint:1;
    } exist;
} APSCommandParams;

#define APSCommandParams_REQUIRED_BYTES_FOR_ENCODING        42
#define APSCommandParams_REQUIRED_BITS_FOR_ENCODING        335
#define APSCommandParams_REQUIRED_BYTES_FOR_ACN_ENCODING       42
#define APSCommandParams_REQUIRED_BITS_FOR_ACN_ENCODING        335
#define APSCommandParams_REQUIRED_BYTES_FOR_XER_ENCODING       491

#ifndef ERR_APSCommandParams_data 
#define ERR_APSCommandParams_data		1036 /* (SIZE (0..16)) */
#endif

void APSCommandParams_Initialize(APSCommandParams* pVal);
flag APSCommandParams_IsConstraintValid(const APSCommandParams* val, int* pErrCode);
flag APSCommandParams_XER_Encode(const APSCommandParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag APSCommandParams_XER_Decode(APSCommandParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag APSCommandParams_BER_Encode(const APSCommandParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag APSCommandParams_BER_Decode(APSCommandParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Integer16 group_address;
    ZigBeeEndpoint endpoint;
} GroupParams;

#define GroupParams_REQUIRED_BYTES_FOR_ENCODING        3
#define GroupParams_REQUIRED_BITS_FOR_ENCODING        24
#define GroupParams_REQUIRED_BYTES_FOR_ACN_ENCODING       3
#define GroupParams_REQUIRED_BITS_FOR_ACN_ENCODING        24
#define GroupParams_REQUIRED_BYTES_FOR_XER_ENCODING       119


void GroupParams_Initialize(GroupParams* pVal);
flag GroupParams_IsConstraintValid(const GroupParams* val, int* pErrCode);
flag GroupParams_XER_Encode(const GroupParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag GroupParams_XER_Decode(GroupParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag GroupParams_BER_Encode(const GroupParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag GroupParams_BER_Decode(GroupParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Integer8 dstAddress_mode;
    DestinationAddress dst_address;
    ZigBeeEndpoint dst_endpoint;
    Integer8 srcAddress_mode;
    ZigBeeNetworkAddress src_address;
    ZigBeeIEEEAddress src_ieeeAddress;
    ZigBeeAliasAddress src_aliasAddress;
    ZigBeeEndpoint src_endpoint;
    ZigBeeProfileID profileID;
    ZigBeeClusterID clusterID;
    Integer8 dataLength;
    struct {
        long nCount; 
            
        byte arr[16];
    } data;
    Status8 aps_status;
    Status8 security_status;
    Integer8 link_quality;
    TimeStamp rxtime;
    struct {
        unsigned int dst_endpoint:1;
        unsigned int src_ieeeAddress:1;
        unsigned int src_aliasAddress:1;
    } exist;
} NotifyAPSMessageEventParams;

#define NotifyAPSMessageEventParams_REQUIRED_BYTES_FOR_ENCODING        77
#define NotifyAPSMessageEventParams_REQUIRED_BITS_FOR_ENCODING        612
#define NotifyAPSMessageEventParams_REQUIRED_BYTES_FOR_ACN_ENCODING       77
#define NotifyAPSMessageEventParams_REQUIRED_BITS_FOR_ACN_ENCODING        612
#define NotifyAPSMessageEventParams_REQUIRED_BYTES_FOR_XER_ENCODING       886

#ifndef ERR_NotifyAPSMessageEventParams_data 
#define ERR_NotifyAPSMessageEventParams_data		1037 /* (SIZE (0..16)) */
#endif

void NotifyAPSMessageEventParams_Initialize(NotifyAPSMessageEventParams* pVal);
flag NotifyAPSMessageEventParams_IsConstraintValid(const NotifyAPSMessageEventParams* val, int* pErrCode);
flag NotifyAPSMessageEventParams_XER_Encode(const NotifyAPSMessageEventParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag NotifyAPSMessageEventParams_XER_Decode(NotifyAPSMessageEventParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag NotifyAPSMessageEventParams_BER_Encode(const NotifyAPSMessageEventParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag NotifyAPSMessageEventParams_BER_Decode(NotifyAPSMessageEventParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Integer8 srcAddress_mode;
    Integer8 dstAddress_mode;
    DestinationAddress dst_address;
    Integer16 dst_panId;
    ZigBeeProfileID profileID;
    ZigBeeClusterID clusterID;
    Integer16 asdu_length;
    struct {
        long nCount; 
            
        byte arr[16];
    } asdu;
    Integer8 asdu_handle;
} SendInterPANMessageParams;

#define SendInterPANMessageParams_REQUIRED_BYTES_FOR_ENCODING        45
#define SendInterPANMessageParams_REQUIRED_BITS_FOR_ENCODING        356
#define SendInterPANMessageParams_REQUIRED_BYTES_FOR_ACN_ENCODING       45
#define SendInterPANMessageParams_REQUIRED_BITS_FOR_ACN_ENCODING        356
#define SendInterPANMessageParams_REQUIRED_BYTES_FOR_XER_ENCODING       523

#ifndef ERR_SendInterPANMessageParams_asdu 
#define ERR_SendInterPANMessageParams_asdu		1038 /* (SIZE (0..16)) */
#endif

void SendInterPANMessageParams_Initialize(SendInterPANMessageParams* pVal);
flag SendInterPANMessageParams_IsConstraintValid(const SendInterPANMessageParams* val, int* pErrCode);
flag SendInterPANMessageParams_XER_Encode(const SendInterPANMessageParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag SendInterPANMessageParams_XER_Decode(SendInterPANMessageParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag SendInterPANMessageParams_BER_Encode(const SendInterPANMessageParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag SendInterPANMessageParams_BER_Decode(SendInterPANMessageParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Integer8 srcAddress_mode;
    Integer16 src_panId;
    ZigBeeNetworkAddress src_address;
    Integer8 dstAddress_mode;
    ZigBeeNetworkAddress dst_address;
    Integer16 dst_panId;
    ZigBeeProfileID profileID;
    ZigBeeClusterID clusterID;
    Integer8 asdu_length;
    struct {
        long nCount; 
            
        byte arr[16];
    } asdu;
    Integer8 link_quality;
} NotifyInterPANMessageEventParams;

#define NotifyInterPANMessageEventParams_REQUIRED_BYTES_FOR_ENCODING        33
#define NotifyInterPANMessageEventParams_REQUIRED_BITS_FOR_ENCODING        261
#define NotifyInterPANMessageEventParams_REQUIRED_BYTES_FOR_ACN_ENCODING       33
#define NotifyInterPANMessageEventParams_REQUIRED_BITS_FOR_ACN_ENCODING        261
#define NotifyInterPANMessageEventParams_REQUIRED_BYTES_FOR_XER_ENCODING       586

#ifndef ERR_NotifyInterPANMessageEventParams_asdu 
#define ERR_NotifyInterPANMessageEventParams_asdu		1039 /* (SIZE (0..16)) */
#endif

void NotifyInterPANMessageEventParams_Initialize(NotifyInterPANMessageEventParams* pVal);
flag NotifyInterPANMessageEventParams_IsConstraintValid(const NotifyInterPANMessageEventParams* val, int* pErrCode);
flag NotifyInterPANMessageEventParams_XER_Encode(const NotifyInterPANMessageEventParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag NotifyInterPANMessageEventParams_XER_Decode(NotifyInterPANMessageEventParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag NotifyInterPANMessageEventParams_BER_Encode(const NotifyInterPANMessageEventParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag NotifyInterPANMessageEventParams_BER_Decode(NotifyInterPANMessageEventParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    DestinationAddress device_address;
    RemoveChildren remove_children;
    Rejoin rejoin;
    struct {
        unsigned int device_address:1;
        unsigned int remove_children:1;
        unsigned int rejoin:1;
    } exist;
} LeaveParams;

#define LeaveParams_REQUIRED_BYTES_FOR_ENCODING        18
#define LeaveParams_REQUIRED_BITS_FOR_ENCODING        140
#define LeaveParams_REQUIRED_BYTES_FOR_ACN_ENCODING       18
#define LeaveParams_REQUIRED_BITS_FOR_ACN_ENCODING        140
#define LeaveParams_REQUIRED_BYTES_FOR_XER_ENCODING       227


void LeaveParams_Initialize(LeaveParams* pVal);
flag LeaveParams_IsConstraintValid(const LeaveParams* val, int* pErrCode);
flag LeaveParams_XER_Encode(const LeaveParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag LeaveParams_XER_Decode(LeaveParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag LeaveParams_BER_Encode(const LeaveParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag LeaveParams_BER_Decode(LeaveParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Status8 nwk_status;
    ZigBeeNetworkAddress nwk_address;
    struct {
        unsigned int nwk_address:1;
    } exist;
} NetworkStatusEventParams;

#define NetworkStatusEventParams_REQUIRED_BYTES_FOR_ENCODING        4
#define NetworkStatusEventParams_REQUIRED_BITS_FOR_ENCODING        25
#define NetworkStatusEventParams_REQUIRED_BYTES_FOR_ACN_ENCODING       4
#define NetworkStatusEventParams_REQUIRED_BITS_FOR_ACN_ENCODING        25
#define NetworkStatusEventParams_REQUIRED_BYTES_FOR_XER_ENCODING       145


void NetworkStatusEventParams_Initialize(NetworkStatusEventParams* pVal);
flag NetworkStatusEventParams_IsConstraintValid(const NetworkStatusEventParams* val, int* pErrCode);
flag NetworkStatusEventParams_XER_Encode(const NetworkStatusEventParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag NetworkStatusEventParams_XER_Decode(NetworkStatusEventParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag NetworkStatusEventParams_BER_Encode(const NetworkStatusEventParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag NetworkStatusEventParams_BER_Decode(NetworkStatusEventParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Integer8 dstAddress_mode;
    ZigBeeNetworkAddress dst_address;
    Integer8 radius;
    flag noRoute_cache;
    struct {
        unsigned int dst_address:1;
        unsigned int radius:1;
        unsigned int noRoute_cache:1;
    } exist;
} PerformRouteDiscoveryParams;

#define PerformRouteDiscoveryParams_REQUIRED_BYTES_FOR_ENCODING        5
#define PerformRouteDiscoveryParams_REQUIRED_BITS_FOR_ENCODING        36
#define PerformRouteDiscoveryParams_REQUIRED_BYTES_FOR_ACN_ENCODING       5
#define PerformRouteDiscoveryParams_REQUIRED_BITS_FOR_ACN_ENCODING        36
#define PerformRouteDiscoveryParams_REQUIRED_BYTES_FOR_XER_ENCODING       242


void PerformRouteDiscoveryParams_Initialize(PerformRouteDiscoveryParams* pVal);
flag PerformRouteDiscoveryParams_IsConstraintValid(const PerformRouteDiscoveryParams* val, int* pErrCode);
flag PerformRouteDiscoveryParams_XER_Encode(const PerformRouteDiscoveryParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag PerformRouteDiscoveryParams_XER_Decode(PerformRouteDiscoveryParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag PerformRouteDiscoveryParams_BER_Encode(const PerformRouteDiscoveryParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag PerformRouteDiscoveryParams_BER_Decode(PerformRouteDiscoveryParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Integer8 dstAddress_mode;
    DestinationAddress dst_address;
    Integer8 nsdu_length;
    struct {
        long nCount; 
            
        byte arr[16];
    } nsdu;
    Integer8 nsdu_handle;
    Integer8 radius;
    Integer8 radius_nonmember;
    Integer8 discover_route;
    flag security_enable;
    struct {
        unsigned int nsdu_length:1;
        unsigned int nsdu:1;
    } exist;
} SendNWKMessageParams;

#define SendNWKMessageParams_REQUIRED_BYTES_FOR_ENCODING        40
#define SendNWKMessageParams_REQUIRED_BITS_FOR_ENCODING        319
#define SendNWKMessageParams_REQUIRED_BYTES_FOR_ACN_ENCODING       40
#define SendNWKMessageParams_REQUIRED_BITS_FOR_ACN_ENCODING        319
#define SendNWKMessageParams_REQUIRED_BYTES_FOR_XER_ENCODING       524

#ifndef ERR_SendNWKMessageParams_nsdu 
#define ERR_SendNWKMessageParams_nsdu		1040 /* (SIZE (0..16)) */
#endif

void SendNWKMessageParams_Initialize(SendNWKMessageParams* pVal);
flag SendNWKMessageParams_IsConstraintValid(const SendNWKMessageParams* val, int* pErrCode);
flag SendNWKMessageParams_XER_Encode(const SendNWKMessageParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag SendNWKMessageParams_XER_Decode(SendNWKMessageParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag SendNWKMessageParams_BER_Encode(const SendNWKMessageParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag SendNWKMessageParams_BER_Decode(SendNWKMessageParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Integer8 dstAddress_mode;
    ZigBeeNetworkAddress dst_address;
    ZigBeeNetworkAddress src_address;
    Integer8 nsdu_length;
    struct {
        long nCount; 
            
        byte arr[16];
    } nsdu;
    Integer8 link_quality;
    TimeStamp rxtime;
    flag security_use;
    struct {
        unsigned int link_quality:1;
        unsigned int rxtime:1;
        unsigned int security_use:1;
    } exist;
} NotifyNWKMessageEventParams;

#define NotifyNWKMessageEventParams_REQUIRED_BYTES_FOR_ENCODING        29
#define NotifyNWKMessageEventParams_REQUIRED_BITS_FOR_ENCODING        225
#define NotifyNWKMessageEventParams_REQUIRED_BYTES_FOR_ACN_ENCODING       29
#define NotifyNWKMessageEventParams_REQUIRED_BITS_FOR_ACN_ENCODING        225
#define NotifyNWKMessageEventParams_REQUIRED_BYTES_FOR_XER_ENCODING       428

#ifndef ERR_NotifyNWKMessageEventParams_nsdu 
#define ERR_NotifyNWKMessageEventParams_nsdu		1041 /* (SIZE (0..16)) */
#endif

void NotifyNWKMessageEventParams_Initialize(NotifyNWKMessageEventParams* pVal);
flag NotifyNWKMessageEventParams_IsConstraintValid(const NotifyNWKMessageEventParams* val, int* pErrCode);
flag NotifyNWKMessageEventParams_XER_Encode(const NotifyNWKMessageEventParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag NotifyNWKMessageEventParams_XER_Decode(NotifyNWKMessageEventParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag NotifyNWKMessageEventParams_BER_Encode(const NotifyNWKMessageEventParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag NotifyNWKMessageEventParams_BER_Decode(NotifyNWKMessageEventParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    ZigBeeNetworkAddress src_address;
    Status8 security_status;
    Status8 link_status;
    TimeStamp rxtime;
    ZigBeeClusterID clusterID;
    struct {
        long nCount; 
            
        byte arr[16];
    } command;
    struct {
        unsigned int src_address:1;
        unsigned int security_status:1;
        unsigned int link_status:1;
        unsigned int rxtime:1;
        unsigned int clusterID:1;
        unsigned int command:1;
    } exist;
} ZDPCommandResults;

#define ZDPCommandResults_REQUIRED_BYTES_FOR_ENCODING        28
#define ZDPCommandResults_REQUIRED_BITS_FOR_ENCODING        219
#define ZDPCommandResults_REQUIRED_BYTES_FOR_ACN_ENCODING       28
#define ZDPCommandResults_REQUIRED_BITS_FOR_ACN_ENCODING        219
#define ZDPCommandResults_REQUIRED_BYTES_FOR_XER_ENCODING       319

#ifndef ERR_ZDPCommandResults_command 
#define ERR_ZDPCommandResults_command		1042 /* (SIZE (0..16)) */
#endif

void ZDPCommandResults_Initialize(ZDPCommandResults* pVal);
flag ZDPCommandResults_IsConstraintValid(const ZDPCommandResults* val, int* pErrCode);
flag ZDPCommandResults_XER_Encode(const ZDPCommandResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ZDPCommandResults_XER_Decode(ZDPCommandResults* pVal, ByteStream* pByteStrm, int* pErrCode);
flag ZDPCommandResults_BER_Encode(const ZDPCommandResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ZDPCommandResults_BER_Decode(ZDPCommandResults* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Status8 aps_status;
    TimeStamp rxtime;
    ZigBeeEndpoint dst_endpoint;
    Integer8 srcAddress_mode;
    ZigBeeNetworkAddress src_address;
    ZigBeeIEEEAddress src_ieeeAddress;
    ZigBeeAliasAddress src_aliasAddress;
    ZigBeeEndpoint src_endpoint;
    ZigBeeProfileID profileID;
    ZigBeeClusterID clusterID;
    struct {
        long nCount; 
            
        byte arr[16];
    } zcl_header;
    struct {
        long nCount; 
            
        byte arr[16];
    } zcl_payload;
    struct {
        unsigned int srcAddress_mode:1;
        unsigned int src_address:1;
        unsigned int src_ieeeAddress:1;
        unsigned int src_aliasAddress:1;
        unsigned int src_endpoint:1;
        unsigned int profileID:1;
        unsigned int clusterID:1;
        unsigned int zcl_header:1;
        unsigned int zcl_payload:1;
    } exist;
} ZCLCommandResults;

#define ZCLCommandResults_REQUIRED_BYTES_FOR_ENCODING        73
#define ZCLCommandResults_REQUIRED_BITS_FOR_ENCODING        584
#define ZCLCommandResults_REQUIRED_BYTES_FOR_ACN_ENCODING       73
#define ZCLCommandResults_REQUIRED_BITS_FOR_ACN_ENCODING        584
#define ZCLCommandResults_REQUIRED_BYTES_FOR_XER_ENCODING       643

#ifndef ERR_ZCLCommandResults_zcl_header 
#define ERR_ZCLCommandResults_zcl_header		1043 /* (SIZE (0..16)) */
#endif
#ifndef ERR_ZCLCommandResults_zcl_payload 
#define ERR_ZCLCommandResults_zcl_payload		1044 /* (SIZE (0..16)) */
#endif

void ZCLCommandResults_Initialize(ZCLCommandResults* pVal);
flag ZCLCommandResults_IsConstraintValid(const ZCLCommandResults* val, int* pErrCode);
flag ZCLCommandResults_XER_Encode(const ZCLCommandResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ZCLCommandResults_XER_Decode(ZCLCommandResults* pVal, ByteStream* pByteStrm, int* pErrCode);
flag ZCLCommandResults_BER_Encode(const ZCLCommandResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ZCLCommandResults_BER_Decode(ZCLCommandResults* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Status8 confirmStatus;
    TimeStamp txtime;
    struct {
        unsigned int confirmStatus:1;
        unsigned int txtime:1;
    } exist;
} APSCommandResults;

#define APSCommandResults_REQUIRED_BYTES_FOR_ENCODING        6
#define APSCommandResults_REQUIRED_BITS_FOR_ENCODING        42
#define APSCommandResults_REQUIRED_BYTES_FOR_ACN_ENCODING       6
#define APSCommandResults_REQUIRED_BITS_FOR_ACN_ENCODING        42
#define APSCommandResults_REQUIRED_BYTES_FOR_XER_ENCODING       127


void APSCommandResults_Initialize(APSCommandResults* pVal);
flag APSCommandResults_IsConstraintValid(const APSCommandResults* val, int* pErrCode);
flag APSCommandResults_XER_Encode(const APSCommandResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag APSCommandResults_XER_Decode(APSCommandResults* pVal, ByteStream* pByteStrm, int* pErrCode);
flag APSCommandResults_BER_Encode(const APSCommandResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag APSCommandResults_BER_Decode(APSCommandResults* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Status8 nwk_status;
    Integer8 nwk_count;
    NetworkDescriptorList nwkDescriptors_list;
} DiscoverNetworksResults;

#define DiscoverNetworksResults_REQUIRED_BYTES_FOR_ENCODING        43
#define DiscoverNetworksResults_REQUIRED_BITS_FOR_ENCODING        337
#define DiscoverNetworksResults_REQUIRED_BYTES_FOR_ACN_ENCODING       43
#define DiscoverNetworksResults_REQUIRED_BITS_FOR_ACN_ENCODING        337
#define DiscoverNetworksResults_REQUIRED_BYTES_FOR_XER_ENCODING       1685


void DiscoverNetworksResults_Initialize(DiscoverNetworksResults* pVal);
flag DiscoverNetworksResults_IsConstraintValid(const DiscoverNetworksResults* val, int* pErrCode);
flag DiscoverNetworksResults_XER_Encode(const DiscoverNetworksResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag DiscoverNetworksResults_XER_Decode(DiscoverNetworksResults* pVal, ByteStream* pByteStrm, int* pErrCode);
flag DiscoverNetworksResults_BER_Encode(const DiscoverNetworksResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag DiscoverNetworksResults_BER_Decode(DiscoverNetworksResults* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Status8 nwk_status;
    Status8 nwkStatus_code;
    struct {
        unsigned int nwk_status:1;
        unsigned int nwkStatus_code:1;
    } exist;
} PerformRouteDiscoveryResults;

#define PerformRouteDiscoveryResults_REQUIRED_BYTES_FOR_ENCODING        3
#define PerformRouteDiscoveryResults_REQUIRED_BITS_FOR_ENCODING        18
#define PerformRouteDiscoveryResults_REQUIRED_BYTES_FOR_ACN_ENCODING       3
#define PerformRouteDiscoveryResults_REQUIRED_BITS_FOR_ACN_ENCODING        18
#define PerformRouteDiscoveryResults_REQUIRED_BYTES_FOR_XER_ENCODING       159


void PerformRouteDiscoveryResults_Initialize(PerformRouteDiscoveryResults* pVal);
flag PerformRouteDiscoveryResults_IsConstraintValid(const PerformRouteDiscoveryResults* val, int* pErrCode);
flag PerformRouteDiscoveryResults_XER_Encode(const PerformRouteDiscoveryResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag PerformRouteDiscoveryResults_XER_Decode(PerformRouteDiscoveryResults* pVal, ByteStream* pByteStrm, int* pErrCode);
flag PerformRouteDiscoveryResults_BER_Encode(const PerformRouteDiscoveryResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag PerformRouteDiscoveryResults_BER_Decode(PerformRouteDiscoveryResults* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Status8 nwk_status;
    Integer8 nsdu_handle;
    TimeStamp txtime;
    struct {
        unsigned int nwk_status:1;
        unsigned int nsdu_handle:1;
        unsigned int txtime:1;
    } exist;
} SendNWKMessageResults;

#define SendNWKMessageResults_REQUIRED_BYTES_FOR_ENCODING        7
#define SendNWKMessageResults_REQUIRED_BITS_FOR_ENCODING        51
#define SendNWKMessageResults_REQUIRED_BYTES_FOR_ACN_ENCODING       7
#define SendNWKMessageResults_REQUIRED_BITS_FOR_ACN_ENCODING        51
#define SendNWKMessageResults_REQUIRED_BYTES_FOR_XER_ENCODING       176


void SendNWKMessageResults_Initialize(SendNWKMessageResults* pVal);
flag SendNWKMessageResults_IsConstraintValid(const SendNWKMessageResults* val, int* pErrCode);
flag SendNWKMessageResults_XER_Encode(const SendNWKMessageResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag SendNWKMessageResults_XER_Decode(SendNWKMessageResults* pVal, ByteStream* pByteStrm, int* pErrCode);
flag SendNWKMessageResults_BER_Encode(const SendNWKMessageResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag SendNWKMessageResults_BER_Decode(SendNWKMessageResults* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    ZigBeeNetworkAddress src_address;
    ZigBeeEndpoint src_endpoint;
    ZigBeeEndpoint dst_endpoint;
    struct {
        unsigned int src_address:1;
        unsigned int src_endpoint:1;
        unsigned int dst_endpoint:1;
    } exist;
} FilterAddressing;

#define FilterAddressing_REQUIRED_BYTES_FOR_ENCODING        5
#define FilterAddressing_REQUIRED_BITS_FOR_ENCODING        35
#define FilterAddressing_REQUIRED_BYTES_FOR_ACN_ENCODING       5
#define FilterAddressing_REQUIRED_BITS_FOR_ACN_ENCODING        35
#define FilterAddressing_REQUIRED_BYTES_FOR_XER_ENCODING       182


void FilterAddressing_Initialize(FilterAddressing* pVal);
flag FilterAddressing_IsConstraintValid(const FilterAddressing* val, int* pErrCode);
flag FilterAddressing_XER_Encode(const FilterAddressing* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag FilterAddressing_XER_Decode(FilterAddressing* pVal, ByteStream* pByteStrm, int* pErrCode);
flag FilterAddressing_BER_Encode(const FilterAddressing* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag FilterAddressing_BER_Decode(FilterAddressing* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    enum {
        FilterMessage_NONE,
        cluster_id_PRESENT,
        cluster_group_PRESENT 
    } kind;
    union {
        ZigBeeClusterID cluster_id;
        ZigBeeClusterGroup cluster_group;
    } u; 
} FilterMessage;

#define FilterMessage_REQUIRED_BYTES_FOR_ENCODING        3
#define FilterMessage_REQUIRED_BITS_FOR_ENCODING        17
#define FilterMessage_REQUIRED_BYTES_FOR_ACN_ENCODING       3
#define FilterMessage_REQUIRED_BITS_FOR_ACN_ENCODING        17
#define FilterMessage_REQUIRED_BYTES_FOR_XER_ENCODING       101

#ifndef ERR_FilterMessage_unknown_choice_index 
#define ERR_FilterMessage_unknown_choice_index		1045 /*  */
#endif

void FilterMessage_Initialize(FilterMessage* pVal);
flag FilterMessage_IsConstraintValid(const FilterMessage* val, int* pErrCode);
flag FilterMessage_XER_Encode(const FilterMessage* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag FilterMessage_XER_Decode(FilterMessage* pVal, ByteStream* pByteStrm, int* pErrCode);
flag FilterMessage_BER_Encode(const FilterMessage* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag FilterMessage_BER_Decode(FilterMessage* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    DeviceType deviceType;
    Integer8 protocolVersion;
    Integer8 stackProfile;
    Integer32 channelMask;
    ZigBeeExtendedPanId extendedPANId;
    Integer16 panId;
    ZigBeeNetworkAddress shortAddress;
    ZigBeeIEEEAddress trustCenterAddress;
    ZigBeeSecurityKey trustCenterMasterKey;
    ZigBeeSecurityKey networkKey;
    Integer8 useInsecureJoin;
    ZigBeeSecurityKey preconfiguredLinkKey;
    Integer8 networkKeySeqNum;
    Integer8 networkKeyType;
    ZigBeeNetworkAddress networkManagerAddress;
    Integer8 startupControl;
    Integer8 scanAttempts;
    Integer16 timeBetweenScans;
    Integer16 rejoinInterval;
    Integer16 maxRejoinInterval;
    Integer16 indirectPollRate;
    Integer8 parentRetryThreshold;
    flag concentratorFlag;
    Integer8 concentratorRadius;
    Integer8 concentratorDiscoveryTime;
    struct {
        unsigned int deviceType:1;
        unsigned int protocolVersion:1;
        unsigned int stackProfile:1;
        unsigned int channelMask:1;
        unsigned int extendedPANId:1;
        unsigned int panId:1;
        unsigned int shortAddress:1;
        unsigned int trustCenterAddress:1;
        unsigned int trustCenterMasterKey:1;
        unsigned int networkKey:1;
        unsigned int useInsecureJoin:1;
        unsigned int preconfiguredLinkKey:1;
        unsigned int networkKeySeqNum:1;
        unsigned int networkKeyType:1;
        unsigned int networkManagerAddress:1;
        unsigned int startupControl:1;
        unsigned int scanAttempts:1;
        unsigned int timeBetweenScans:1;
        unsigned int rejoinInterval:1;
        unsigned int maxRejoinInterval:1;
        unsigned int indirectPollRate:1;
        unsigned int parentRetryThreshold:1;
        unsigned int concentratorFlag:1;
        unsigned int concentratorRadius:1;
        unsigned int concentratorDiscoveryTime:1;
    } exist;
} StartupAttributeSet;

#define StartupAttributeSet_REQUIRED_BYTES_FOR_ENCODING        96
#define StartupAttributeSet_REQUIRED_BITS_FOR_ENCODING        764
#define StartupAttributeSet_REQUIRED_BYTES_FOR_ACN_ENCODING       96
#define StartupAttributeSet_REQUIRED_BITS_FOR_ACN_ENCODING        764
#define StartupAttributeSet_REQUIRED_BYTES_FOR_XER_ENCODING       1458


void StartupAttributeSet_Initialize(StartupAttributeSet* pVal);
flag StartupAttributeSet_IsConstraintValid(const StartupAttributeSet* val, int* pErrCode);
flag StartupAttributeSet_XER_Encode(const StartupAttributeSet* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag StartupAttributeSet_XER_Decode(StartupAttributeSet* pVal, ByteStream* pByteStrm, int* pErrCode);
flag StartupAttributeSet_BER_Encode(const StartupAttributeSet* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag StartupAttributeSet_BER_Decode(StartupAttributeSet* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    ZigBeeNetworkAddress short_address;
    ZigBeeIEEEAddress ieee_address;
    ZigBeeAliasAddress alias_address;
    struct {
        unsigned int alias_address:1;
    } exist;
} AddressesStruct;

#define AddressesStruct_REQUIRED_BYTES_FOR_ENCODING        27
#define AddressesStruct_REQUIRED_BITS_FOR_ENCODING        214
#define AddressesStruct_REQUIRED_BYTES_FOR_ACN_ENCODING       27
#define AddressesStruct_REQUIRED_BITS_FOR_ACN_ENCODING        214
#define AddressesStruct_REQUIRED_BYTES_FOR_XER_ENCODING       194


void AddressesStruct_Initialize(AddressesStruct* pVal);
flag AddressesStruct_IsConstraintValid(const AddressesStruct* val, int* pErrCode);
flag AddressesStruct_XER_Encode(const AddressesStruct* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag AddressesStruct_XER_Decode(AddressesStruct* pVal, ByteStream* pByteStrm, int* pErrCode);
flag AddressesStruct_BER_Encode(const AddressesStruct* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag AddressesStruct_BER_Decode(AddressesStruct* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    ZigBeeIEEEAddress src_address;
    ZigBeeEndpoint src_endpoint;
} BindingDeviceDestEntry;

#define BindingDeviceDestEntry_REQUIRED_BYTES_FOR_ENCODING        9
#define BindingDeviceDestEntry_REQUIRED_BITS_FOR_ENCODING        72
#define BindingDeviceDestEntry_REQUIRED_BYTES_FOR_ACN_ENCODING       9
#define BindingDeviceDestEntry_REQUIRED_BITS_FOR_ACN_ENCODING        72
#define BindingDeviceDestEntry_REQUIRED_BYTES_FOR_XER_ENCODING       141


void BindingDeviceDestEntry_Initialize(BindingDeviceDestEntry* pVal);
flag BindingDeviceDestEntry_IsConstraintValid(const BindingDeviceDestEntry* val, int* pErrCode);
flag BindingDeviceDestEntry_XER_Encode(const BindingDeviceDestEntry* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag BindingDeviceDestEntry_XER_Decode(BindingDeviceDestEntry* pVal, ByteStream* pByteStrm, int* pErrCode);
flag BindingDeviceDestEntry_BER_Encode(const BindingDeviceDestEntry* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag BindingDeviceDestEntry_BER_Decode(BindingDeviceDestEntry* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    
    CallbackId arr[3];
} CallbackList;

#define CallbackList_REQUIRED_BYTES_FOR_ENCODING        12
#define CallbackList_REQUIRED_BITS_FOR_ENCODING        96
#define CallbackList_REQUIRED_BYTES_FOR_ACN_ENCODING       12
#define CallbackList_REQUIRED_BITS_FOR_ACN_ENCODING        96
#define CallbackList_REQUIRED_BYTES_FOR_XER_ENCODING       164

#ifndef ERR_CallbackList 
#define ERR_CallbackList		1046 /* (SIZE (3)) */
#endif

void CallbackList_Initialize(CallbackList* pVal);
flag CallbackList_IsConstraintValid(const CallbackList* val, int* pErrCode);
flag CallbackList_XER_Encode(const CallbackList* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag CallbackList_XER_Decode(CallbackList* pVal, ByteStream* pByteStrm, int* pErrCode);
flag CallbackList_BER_Encode(const CallbackList* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag CallbackList_BER_Decode(CallbackList* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    
    ZigBeeClusterID arr[3];
} ClusterList;

#define ClusterList_REQUIRED_BYTES_FOR_ENCODING        6
#define ClusterList_REQUIRED_BITS_FOR_ENCODING        48
#define ClusterList_REQUIRED_BYTES_FOR_ACN_ENCODING       6
#define ClusterList_REQUIRED_BITS_FOR_ACN_ENCODING        48
#define ClusterList_REQUIRED_BYTES_FOR_XER_ENCODING       192

#ifndef ERR_ClusterList 
#define ERR_ClusterList		1047 /* (SIZE (3)) */
#endif

void ClusterList_Initialize(ClusterList* pVal);
flag ClusterList_IsConstraintValid(const ClusterList* val, int* pErrCode);
flag ClusterList_XER_Encode(const ClusterList* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ClusterList_XER_Decode(ClusterList* pVal, ByteStream* pByteStrm, int* pErrCode);
flag ClusterList_BER_Encode(const ClusterList* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ClusterList_BER_Decode(ClusterList* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    
    ZigBeeEndpoint arr[3];
} EndpointList;

#define EndpointList_REQUIRED_BYTES_FOR_ENCODING        3
#define EndpointList_REQUIRED_BITS_FOR_ENCODING        24
#define EndpointList_REQUIRED_BYTES_FOR_ACN_ENCODING       3
#define EndpointList_REQUIRED_BITS_FOR_ACN_ENCODING        24
#define EndpointList_REQUIRED_BYTES_FOR_XER_ENCODING       188

#ifndef ERR_EndpointList 
#define ERR_EndpointList		1048 /* (SIZE (3)) */
#endif

void EndpointList_Initialize(EndpointList* pVal);
flag EndpointList_IsConstraintValid(const EndpointList* val, int* pErrCode);
flag EndpointList_XER_Encode(const EndpointList* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag EndpointList_XER_Decode(EndpointList* pVal, ByteStream* pByteStrm, int* pErrCode);
flag EndpointList_BER_Encode(const EndpointList* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag EndpointList_BER_Decode(EndpointList* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    
    EnergyMeasurements arr[3];
} EnergyMeasurementsList;

#define EnergyMeasurementsList_REQUIRED_BYTES_FOR_ENCODING        3
#define EnergyMeasurementsList_REQUIRED_BITS_FOR_ENCODING        24
#define EnergyMeasurementsList_REQUIRED_BYTES_FOR_ACN_ENCODING       3
#define EnergyMeasurementsList_REQUIRED_BITS_FOR_ACN_ENCODING        24
#define EnergyMeasurementsList_REQUIRED_BYTES_FOR_XER_ENCODING       232

#ifndef ERR_EnergyMeasurementsList 
#define ERR_EnergyMeasurementsList		1049 /* (SIZE (3)) */
#endif

void EnergyMeasurementsList_Initialize(EnergyMeasurementsList* pVal);
flag EnergyMeasurementsList_IsConstraintValid(const EnergyMeasurementsList* val, int* pErrCode);
flag EnergyMeasurementsList_XER_Encode(const EnergyMeasurementsList* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag EnergyMeasurementsList_XER_Decode(EnergyMeasurementsList* pVal, ByteStream* pByteStrm, int* pErrCode);
flag EnergyMeasurementsList_BER_Encode(const EnergyMeasurementsList* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag EnergyMeasurementsList_BER_Decode(EnergyMeasurementsList* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    
    ZigBeeNetworkAddress arr[3];
} AssociatedDevicesList;

#define AssociatedDevicesList_REQUIRED_BYTES_FOR_ENCODING        6
#define AssociatedDevicesList_REQUIRED_BITS_FOR_ENCODING        48
#define AssociatedDevicesList_REQUIRED_BYTES_FOR_ACN_ENCODING       6
#define AssociatedDevicesList_REQUIRED_BITS_FOR_ACN_ENCODING        48
#define AssociatedDevicesList_REQUIRED_BYTES_FOR_XER_ENCODING       242

#ifndef ERR_AssociatedDevicesList 
#define ERR_AssociatedDevicesList		1050 /* (SIZE (3)) */
#endif

void AssociatedDevicesList_Initialize(AssociatedDevicesList* pVal);
flag AssociatedDevicesList_IsConstraintValid(const AssociatedDevicesList* val, int* pErrCode);
flag AssociatedDevicesList_XER_Encode(const AssociatedDevicesList* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag AssociatedDevicesList_XER_Decode(AssociatedDevicesList* pVal, ByteStream* pByteStrm, int* pErrCode);
flag AssociatedDevicesList_BER_Encode(const AssociatedDevicesList* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag AssociatedDevicesList_BER_Decode(AssociatedDevicesList* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    
    AddressesStruct arr[3];
} AddressesStructList;

#define AddressesStructList_REQUIRED_BYTES_FOR_ENCODING        81
#define AddressesStructList_REQUIRED_BITS_FOR_ENCODING        642
#define AddressesStructList_REQUIRED_BYTES_FOR_ACN_ENCODING       81
#define AddressesStructList_REQUIRED_BITS_FOR_ACN_ENCODING        642
#define AddressesStructList_REQUIRED_BYTES_FOR_XER_ENCODING       625

#ifndef ERR_AddressesStructList 
#define ERR_AddressesStructList		1051 /* (SIZE (3)) */
#endif

void AddressesStructList_Initialize(AddressesStructList* pVal);
flag AddressesStructList_IsConstraintValid(const AddressesStructList* val, int* pErrCode);
flag AddressesStructList_XER_Encode(const AddressesStructList* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag AddressesStructList_XER_Decode(AddressesStructList* pVal, ByteStream* pByteStrm, int* pErrCode);
flag AddressesStructList_BER_Encode(const AddressesStructList* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag AddressesStructList_BER_Decode(AddressesStructList* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    enum {
        GeneralProcParams_NONE,
        GeneralProcParams_none_PRESENT,
        timeout_PRESENT,
        with_callback_PRESENT 
    } kind;
    union {
        NullType none;
        Timeout timeout;
        CallbackParams with_callback;
    } u; 
} GeneralProcParams;

#define GeneralProcParams_REQUIRED_BYTES_FOR_ENCODING        20
#define GeneralProcParams_REQUIRED_BITS_FOR_ENCODING        155
#define GeneralProcParams_REQUIRED_BYTES_FOR_ACN_ENCODING       21
#define GeneralProcParams_REQUIRED_BITS_FOR_ACN_ENCODING        167
#define GeneralProcParams_REQUIRED_BYTES_FOR_XER_ENCODING       172

#ifndef ERR_GeneralProcParams_unknown_choice_index 
#define ERR_GeneralProcParams_unknown_choice_index		1052 /*  */
#endif

void GeneralProcParams_Initialize(GeneralProcParams* pVal);
flag GeneralProcParams_IsConstraintValid(const GeneralProcParams* val, int* pErrCode);
flag GeneralProcParams_XER_Encode(const GeneralProcParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag GeneralProcParams_XER_Decode(GeneralProcParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag GeneralProcParams_BER_Encode(const GeneralProcParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag GeneralProcParams_BER_Decode(GeneralProcParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    enum {
        GeneralEvthParams_NONE,
        GeneralEvthParams_status_PRESENT,
        request_id_PRESENT,
        GeneralEvthParams_with_reqId_PRESENT,
        callback_id_PRESENT,
        with_callbackid_PRESENT 
    } kind;
    union {
        Status8 status;
        RequestId request_id;
        StatusRequestId with_reqId;
        CallbackId callback_id;
        StatusCallbackId with_callbackid;
    } u; 
} GeneralEvthParams;

#define GeneralEvthParams_REQUIRED_BYTES_FOR_ENCODING        6
#define GeneralEvthParams_REQUIRED_BITS_FOR_ENCODING        43
#define GeneralEvthParams_REQUIRED_BYTES_FOR_ACN_ENCODING       6
#define GeneralEvthParams_REQUIRED_BITS_FOR_ACN_ENCODING        43
#define GeneralEvthParams_REQUIRED_BYTES_FOR_XER_ENCODING       158

#ifndef ERR_GeneralEvthParams_unknown_choice_index 
#define ERR_GeneralEvthParams_unknown_choice_index		1053 /*  */
#endif

void GeneralEvthParams_Initialize(GeneralEvthParams* pVal);
flag GeneralEvthParams_IsConstraintValid(const GeneralEvthParams* val, int* pErrCode);
flag GeneralEvthParams_XER_Encode(const GeneralEvthParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag GeneralEvthParams_XER_Decode(GeneralEvthParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag GeneralEvthParams_BER_Encode(const GeneralEvthParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag GeneralEvthParams_BER_Decode(GeneralEvthParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    enum {
        GeneralProcResults_NONE,
        GeneralProcResults_status_PRESENT,
        GeneralProcResults_with_reqId_PRESENT 
    } kind;
    union {
        Status8 status;
        StatusRequestId with_reqId;
    } u; 
} GeneralProcResults;

#define GeneralProcResults_REQUIRED_BYTES_FOR_ENCODING        6
#define GeneralProcResults_REQUIRED_BITS_FOR_ENCODING        41
#define GeneralProcResults_REQUIRED_BYTES_FOR_ACN_ENCODING       6
#define GeneralProcResults_REQUIRED_BITS_FOR_ACN_ENCODING        41
#define GeneralProcResults_REQUIRED_BYTES_FOR_XER_ENCODING       148

#ifndef ERR_GeneralProcResults_unknown_choice_index 
#define ERR_GeneralProcResults_unknown_choice_index		1054 /*  */
#endif

void GeneralProcResults_Initialize(GeneralProcResults* pVal);
flag GeneralProcResults_IsConstraintValid(const GeneralProcResults* val, int* pErrCode);
flag GeneralProcResults_XER_Encode(const GeneralProcResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag GeneralProcResults_XER_Decode(GeneralProcResults* pVal, ByteStream* pByteStrm, int* pErrCode);
flag GeneralProcResults_BER_Encode(const GeneralProcResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag GeneralProcResults_BER_Decode(GeneralProcResults* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Integer8 startupset_index;
    StartupAttributeSet startup_attributeset;
} GatewayStartParams;

#define GatewayStartParams_REQUIRED_BYTES_FOR_ENCODING        97
#define GatewayStartParams_REQUIRED_BITS_FOR_ENCODING        772
#define GatewayStartParams_REQUIRED_BYTES_FOR_ACN_ENCODING       97
#define GatewayStartParams_REQUIRED_BITS_FOR_ACN_ENCODING        772
#define GatewayStartParams_REQUIRED_BYTES_FOR_XER_ENCODING       1558


void GatewayStartParams_Initialize(GatewayStartParams* pVal);
flag GatewayStartParams_IsConstraintValid(const GatewayStartParams* val, int* pErrCode);
flag GatewayStartParams_XER_Encode(const GatewayStartParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag GatewayStartParams_XER_Decode(GatewayStartParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag GatewayStartParams_BER_Encode(const GatewayStartParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag GatewayStartParams_BER_Decode(GatewayStartParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Integer32 callback_number;
    CallbackList callback_list;
} ListCallbacksResults;

#define ListCallbacksResults_REQUIRED_BYTES_FOR_ENCODING        16
#define ListCallbacksResults_REQUIRED_BITS_FOR_ENCODING        128
#define ListCallbacksResults_REQUIRED_BYTES_FOR_ACN_ENCODING       16
#define ListCallbacksResults_REQUIRED_BITS_FOR_ACN_ENCODING        128
#define ListCallbacksResults_REQUIRED_BYTES_FOR_XER_ENCODING       266


void ListCallbacksResults_Initialize(ListCallbacksResults* pVal);
flag ListCallbacksResults_IsConstraintValid(const ListCallbacksResults* val, int* pErrCode);
flag ListCallbacksResults_XER_Encode(const ListCallbacksResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ListCallbacksResults_XER_Decode(ListCallbacksResults* pVal, ByteStream* pByteStrm, int* pErrCode);
flag ListCallbacksResults_BER_Encode(const ListCallbacksResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ListCallbacksResults_BER_Decode(ListCallbacksResults* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    ActionDecodeSpec decode;
    ZDPCommandResults sendZDPCommandResults;
    ZCLCommandResults sendZCLCommandResults;
    INTRPANCommandResults sendINTERPANMessageResults;
    NotifyAPSMessageEventParams sendAPSCommandResults;
    struct {
        unsigned int sendZDPCommandResults:1;
        unsigned int sendZCLCommandResults:1;
        unsigned int sendINTERPANMessageResults:1;
        unsigned int sendAPSCommandResults:1;
    } exist;
} PollCallbackResults;

#define PollCallbackResults_REQUIRED_BYTES_FOR_ENCODING        180
#define PollCallbackResults_REQUIRED_BITS_FOR_ENCODING        1440
#define PollCallbackResults_REQUIRED_BYTES_FOR_ACN_ENCODING       180
#define PollCallbackResults_REQUIRED_BITS_FOR_ACN_ENCODING        1440
#define PollCallbackResults_REQUIRED_BYTES_FOR_XER_ENCODING       2106


void PollCallbackResults_Initialize(PollCallbackResults* pVal);
flag PollCallbackResults_IsConstraintValid(const PollCallbackResults* val, int* pErrCode);
flag PollCallbackResults_XER_Encode(const PollCallbackResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag PollCallbackResults_XER_Decode(PollCallbackResults* pVal, ByteStream* pByteStrm, int* pErrCode);
flag PollCallbackResults_BER_Encode(const PollCallbackResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag PollCallbackResults_BER_Decode(PollCallbackResults* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Integer32 nb_addresses;
    AddressesStructList addressList;
} ListAddressesResults;

#define ListAddressesResults_REQUIRED_BYTES_FOR_ENCODING        85
#define ListAddressesResults_REQUIRED_BITS_FOR_ENCODING        674
#define ListAddressesResults_REQUIRED_BYTES_FOR_ACN_ENCODING       85
#define ListAddressesResults_REQUIRED_BITS_FOR_ACN_ENCODING        674
#define ListAddressesResults_REQUIRED_BYTES_FOR_XER_ENCODING       703


void ListAddressesResults_Initialize(ListAddressesResults* pVal);
flag ListAddressesResults_IsConstraintValid(const ListAddressesResults* val, int* pErrCode);
flag ListAddressesResults_XER_Encode(const ListAddressesResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ListAddressesResults_XER_Decode(ListAddressesResults* pVal, ByteStream* pByteStrm, int* pErrCode);
flag ListAddressesResults_BER_Encode(const ListAddressesResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ListAddressesResults_BER_Decode(ListAddressesResults* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Status8 nwk_status;
    Integer32 scanned_channels;
    EnergyMeasurementsList energyDetect_list;
    struct {
        unsigned int nwk_status:1;
        unsigned int energyDetect_list:1;
    } exist;
} PerformEnergyScanResults;

#define PerformEnergyScanResults_REQUIRED_BYTES_FOR_ENCODING        9
#define PerformEnergyScanResults_REQUIRED_BITS_FOR_ENCODING        66
#define PerformEnergyScanResults_REQUIRED_BYTES_FOR_ACN_ENCODING       9
#define PerformEnergyScanResults_REQUIRED_BITS_FOR_ACN_ENCODING        66
#define PerformEnergyScanResults_REQUIRED_BYTES_FOR_XER_ENCODING       377


void PerformEnergyScanResults_Initialize(PerformEnergyScanResults* pVal);
flag PerformEnergyScanResults_IsConstraintValid(const PerformEnergyScanResults* val, int* pErrCode);
flag PerformEnergyScanResults_XER_Encode(const PerformEnergyScanResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag PerformEnergyScanResults_XER_Decode(PerformEnergyScanResults* pVal, ByteStream* pByteStrm, int* pErrCode);
flag PerformEnergyScanResults_BER_Encode(const PerformEnergyScanResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag PerformEnergyScanResults_BER_Decode(PerformEnergyScanResults* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    
    FilterAddressing arr[3];
} FilterAddressingList;

#define FilterAddressingList_REQUIRED_BYTES_FOR_ENCODING        14
#define FilterAddressingList_REQUIRED_BITS_FOR_ENCODING        105
#define FilterAddressingList_REQUIRED_BYTES_FOR_ACN_ENCODING       14
#define FilterAddressingList_REQUIRED_BITS_FOR_ACN_ENCODING        105
#define FilterAddressingList_REQUIRED_BYTES_FOR_XER_ENCODING       591

#ifndef ERR_FilterAddressingList 
#define ERR_FilterAddressingList		1055 /* (SIZE (3)) */
#endif

void FilterAddressingList_Initialize(FilterAddressingList* pVal);
flag FilterAddressingList_IsConstraintValid(const FilterAddressingList* val, int* pErrCode);
flag FilterAddressingList_XER_Encode(const FilterAddressingList* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag FilterAddressingList_XER_Decode(FilterAddressingList* pVal, ByteStream* pByteStrm, int* pErrCode);
flag FilterAddressingList_BER_Encode(const FilterAddressingList* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag FilterAddressingList_BER_Decode(FilterAddressingList* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    
    FilterMessage arr[3];
} FilterMessageList;

#define FilterMessageList_REQUIRED_BYTES_FOR_ENCODING        7
#define FilterMessageList_REQUIRED_BITS_FOR_ENCODING        51
#define FilterMessageList_REQUIRED_BYTES_FOR_ACN_ENCODING       7
#define FilterMessageList_REQUIRED_BITS_FOR_ACN_ENCODING        51
#define FilterMessageList_REQUIRED_BYTES_FOR_XER_ENCODING       249

#ifndef ERR_FilterMessageList 
#define ERR_FilterMessageList		1056 /* (SIZE (3)) */
#endif

void FilterMessageList_Initialize(FilterMessageList* pVal);
flag FilterMessageList_IsConstraintValid(const FilterMessageList* val, int* pErrCode);
flag FilterMessageList_XER_Encode(const FilterMessageList* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag FilterMessageList_XER_Decode(FilterMessageList* pVal, ByteStream* pByteStrm, int* pErrCode);
flag FilterMessageList_BER_Encode(const FilterMessageList* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag FilterMessageList_BER_Decode(FilterMessageList* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    ZigBeeNetworkAddress device_nwkAddress;
    ZigBeeIEEEAddress device_ieeeAddress;
    ZigBeeAliasAddress device_aliasAddress;
    ZigBeeNetworkAddress parent_nwkAddress;
    ZigBeeIEEEAddress parent_ieeeAddress;
    Integer8 capability_info;
    Integer8 associated_devices;
    Integer8 start_index;
    AssociatedDevicesList associatedDevices_list;
    struct {
        unsigned int device_aliasAddress:1;
        unsigned int parent_nwkAddress:1;
        unsigned int parent_ieeeAddress:1;
        unsigned int associated_devices:1;
        unsigned int start_index:1;
        unsigned int associatedDevices_list:1;
    } exist;
} NodeAddressesStruct;

#define NodeAddressesStruct_REQUIRED_BYTES_FOR_ENCODING        47
#define NodeAddressesStruct_REQUIRED_BITS_FOR_ENCODING        371
#define NodeAddressesStruct_REQUIRED_BYTES_FOR_ACN_ENCODING       47
#define NodeAddressesStruct_REQUIRED_BITS_FOR_ACN_ENCODING        371
#define NodeAddressesStruct_REQUIRED_BYTES_FOR_XER_ENCODING       757


void NodeAddressesStruct_Initialize(NodeAddressesStruct* pVal);
flag NodeAddressesStruct_IsConstraintValid(const NodeAddressesStruct* val, int* pErrCode);
flag NodeAddressesStruct_XER_Encode(const NodeAddressesStruct* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag NodeAddressesStruct_XER_Decode(NodeAddressesStruct* pVal, ByteStream* pByteStrm, int* pErrCode);
flag NodeAddressesStruct_BER_Encode(const NodeAddressesStruct* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag NodeAddressesStruct_BER_Decode(NodeAddressesStruct* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    ZigBeeEndpoint endpoint;
    ZigBeeProfileID profile;
    ZigBeeDeviceID device_id;
    Integer8 device_version;
    Integer8 inputcluster_count;
    ClusterList inputcluster_lists;
    Integer8 outputcluster_count;
    ClusterList outputcluster_lists;
} SimpleDescriptor;

#define SimpleDescriptor_REQUIRED_BYTES_FOR_ENCODING        20
#define SimpleDescriptor_REQUIRED_BITS_FOR_ENCODING        160
#define SimpleDescriptor_REQUIRED_BYTES_FOR_ACN_ENCODING       20
#define SimpleDescriptor_REQUIRED_BITS_FOR_ACN_ENCODING        160
#define SimpleDescriptor_REQUIRED_BYTES_FOR_XER_ENCODING       751


void SimpleDescriptor_Initialize(SimpleDescriptor* pVal);
flag SimpleDescriptor_IsConstraintValid(const SimpleDescriptor* val, int* pErrCode);
flag SimpleDescriptor_XER_Encode(const SimpleDescriptor* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag SimpleDescriptor_XER_Decode(SimpleDescriptor* pVal, ByteStream* pByteStrm, int* pErrCode);
flag SimpleDescriptor_BER_Encode(const SimpleDescriptor* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag SimpleDescriptor_BER_Decode(SimpleDescriptor* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    ZigBeeIEEEAddress src_address;
    ZigBeeEndpoint src_endpoint;
    ZigBeeClusterID clusterID;
    Integer16 groupDest_count;
    ZigBeeGroupAddressList groupDest;
    Integer16 deviceDest_count;
    BindingDeviceDestEntry device_destinations;
} BindingEntry;

#define BindingEntry_REQUIRED_BYTES_FOR_ENCODING        30
#define BindingEntry_REQUIRED_BITS_FOR_ENCODING        240
#define BindingEntry_REQUIRED_BYTES_FOR_ACN_ENCODING       30
#define BindingEntry_REQUIRED_BITS_FOR_ACN_ENCODING        240
#define BindingEntry_REQUIRED_BYTES_FOR_XER_ENCODING       563


void BindingEntry_Initialize(BindingEntry* pVal);
flag BindingEntry_IsConstraintValid(const BindingEntry* val, int* pErrCode);
flag BindingEntry_XER_Encode(const BindingEntry* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag BindingEntry_XER_Decode(BindingEntry* pVal, ByteStream* pByteStrm, int* pErrCode);
flag BindingEntry_BER_Encode(const BindingEntry* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag BindingEntry_BER_Decode(BindingEntry* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Integer16 group_address;
    Integer8 endpoint_count;
    EndpointList endpoint_list;
} GroupEntry;

#define GroupEntry_REQUIRED_BYTES_FOR_ENCODING        6
#define GroupEntry_REQUIRED_BITS_FOR_ENCODING        48
#define GroupEntry_REQUIRED_BYTES_FOR_ACN_ENCODING       6
#define GroupEntry_REQUIRED_BITS_FOR_ACN_ENCODING        48
#define GroupEntry_REQUIRED_BYTES_FOR_XER_ENCODING       319


void GroupEntry_Initialize(GroupEntry* pVal);
flag GroupEntry_IsConstraintValid(const GroupEntry* val, int* pErrCode);
flag GroupEntry_XER_Encode(const GroupEntry* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag GroupEntry_XER_Decode(GroupEntry* pVal, ByteStream* pByteStrm, int* pErrCode);
flag GroupEntry_BER_Encode(const GroupEntry* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag GroupEntry_BER_Decode(GroupEntry* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    
    NodeAddressesStruct arr[3];
} NodeAddressesList;

#define NodeAddressesList_REQUIRED_BYTES_FOR_ENCODING        140
#define NodeAddressesList_REQUIRED_BITS_FOR_ENCODING        1113
#define NodeAddressesList_REQUIRED_BYTES_FOR_ACN_ENCODING       140
#define NodeAddressesList_REQUIRED_BITS_FOR_ACN_ENCODING        1113
#define NodeAddressesList_REQUIRED_BYTES_FOR_XER_ENCODING       2310

#ifndef ERR_NodeAddressesList 
#define ERR_NodeAddressesList		1057 /* (SIZE (3)) */
#endif

void NodeAddressesList_Initialize(NodeAddressesList* pVal);
flag NodeAddressesList_IsConstraintValid(const NodeAddressesList* val, int* pErrCode);
flag NodeAddressesList_XER_Encode(const NodeAddressesList* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag NodeAddressesList_XER_Decode(NodeAddressesList* pVal, ByteStream* pByteStrm, int* pErrCode);
flag NodeAddressesList_BER_Encode(const NodeAddressesList* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag NodeAddressesList_BER_Decode(NodeAddressesList* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    long nCount; 
        
    SimpleDescriptor arr[3];
} SimpleDescriptorList;

#define SimpleDescriptorList_REQUIRED_BYTES_FOR_ENCODING        61
#define SimpleDescriptorList_REQUIRED_BITS_FOR_ENCODING        482
#define SimpleDescriptorList_REQUIRED_BYTES_FOR_ACN_ENCODING       61
#define SimpleDescriptorList_REQUIRED_BITS_FOR_ACN_ENCODING        482
#define SimpleDescriptorList_REQUIRED_BYTES_FOR_XER_ENCODING       2298

#ifndef ERR_SimpleDescriptorList 
#define ERR_SimpleDescriptorList		1058 /* (SIZE (0..3)) */
#endif

void SimpleDescriptorList_Initialize(SimpleDescriptorList* pVal);
flag SimpleDescriptorList_IsConstraintValid(const SimpleDescriptorList* val, int* pErrCode);
flag SimpleDescriptorList_XER_Encode(const SimpleDescriptorList* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag SimpleDescriptorList_XER_Decode(SimpleDescriptorList* pVal, ByteStream* pByteStrm, int* pErrCode);
flag SimpleDescriptorList_BER_Encode(const SimpleDescriptorList* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag SimpleDescriptorList_BER_Decode(SimpleDescriptorList* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    NodeAddressesStruct node_addresses;
} NodeDiscoveryEventParams;

#define NodeDiscoveryEventParams_REQUIRED_BYTES_FOR_ENCODING        47
#define NodeDiscoveryEventParams_REQUIRED_BITS_FOR_ENCODING        371
#define NodeDiscoveryEventParams_REQUIRED_BYTES_FOR_ACN_ENCODING       47
#define NodeDiscoveryEventParams_REQUIRED_BITS_FOR_ACN_ENCODING        371
#define NodeDiscoveryEventParams_REQUIRED_BYTES_FOR_XER_ENCODING       800


void NodeDiscoveryEventParams_Initialize(NodeDiscoveryEventParams* pVal);
flag NodeDiscoveryEventParams_IsConstraintValid(const NodeDiscoveryEventParams* val, int* pErrCode);
flag NodeDiscoveryEventParams_XER_Encode(const NodeDiscoveryEventParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag NodeDiscoveryEventParams_XER_Decode(NodeDiscoveryEventParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag NodeDiscoveryEventParams_BER_Encode(const NodeDiscoveryEventParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag NodeDiscoveryEventParams_BER_Decode(NodeDiscoveryEventParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    ZigBeeNetworkAddress device_nwkAddress;
    ZigBeeIEEEAddress device_ieeeAddress;
    ZigBeeAliasAddress device_aliasAddress;
    Integer8 active_endpoints;
    SimpleDescriptorList simple_descriptors;
    struct {
        unsigned int device_ieeeAddress:1;
        unsigned int device_aliasAddress:1;
        unsigned int simple_descriptors:1;
    } exist;
} ServiceDiscoveryEventParams;

#define ServiceDiscoveryEventParams_REQUIRED_BYTES_FOR_ENCODING        89
#define ServiceDiscoveryEventParams_REQUIRED_BITS_FOR_ENCODING        706
#define ServiceDiscoveryEventParams_REQUIRED_BYTES_FOR_ACN_ENCODING       89
#define ServiceDiscoveryEventParams_REQUIRED_BITS_FOR_ACN_ENCODING        706
#define ServiceDiscoveryEventParams_REQUIRED_BYTES_FOR_XER_ENCODING       2601


void ServiceDiscoveryEventParams_Initialize(ServiceDiscoveryEventParams* pVal);
flag ServiceDiscoveryEventParams_IsConstraintValid(const ServiceDiscoveryEventParams* val, int* pErrCode);
flag ServiceDiscoveryEventParams_XER_Encode(const ServiceDiscoveryEventParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ServiceDiscoveryEventParams_XER_Decode(ServiceDiscoveryEventParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag ServiceDiscoveryEventParams_BER_Encode(const ServiceDiscoveryEventParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ServiceDiscoveryEventParams_BER_Decode(ServiceDiscoveryEventParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    ZigBeeEndpoint endpoint;
    SimpleDescriptor simple_descriptor;
} ConfigureEndpointParams;

#define ConfigureEndpointParams_REQUIRED_BYTES_FOR_ENCODING        21
#define ConfigureEndpointParams_REQUIRED_BITS_FOR_ENCODING        168
#define ConfigureEndpointParams_REQUIRED_BYTES_FOR_ACN_ENCODING       21
#define ConfigureEndpointParams_REQUIRED_BITS_FOR_ACN_ENCODING        168
#define ConfigureEndpointParams_REQUIRED_BYTES_FOR_XER_ENCODING       845


void ConfigureEndpointParams_Initialize(ConfigureEndpointParams* pVal);
flag ConfigureEndpointParams_IsConstraintValid(const ConfigureEndpointParams* val, int* pErrCode);
flag ConfigureEndpointParams_XER_Encode(const ConfigureEndpointParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ConfigureEndpointParams_XER_Decode(ConfigureEndpointParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag ConfigureEndpointParams_BER_Encode(const ConfigureEndpointParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ConfigureEndpointParams_BER_Decode(ConfigureEndpointParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Integer8 nodes_number;
    NodeAddressesList node_info;
} NodeCacheResults;

#define NodeCacheResults_REQUIRED_BYTES_FOR_ENCODING        141
#define NodeCacheResults_REQUIRED_BITS_FOR_ENCODING        1121
#define NodeCacheResults_REQUIRED_BYTES_FOR_ACN_ENCODING       141
#define NodeCacheResults_REQUIRED_BITS_FOR_ACN_ENCODING        1121
#define NodeCacheResults_REQUIRED_BYTES_FOR_XER_ENCODING       2380


void NodeCacheResults_Initialize(NodeCacheResults* pVal);
flag NodeCacheResults_IsConstraintValid(const NodeCacheResults* val, int* pErrCode);
flag NodeCacheResults_XER_Encode(const NodeCacheResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag NodeCacheResults_XER_Decode(NodeCacheResults* pVal, ByteStream* pByteStrm, int* pErrCode);
flag NodeCacheResults_BER_Encode(const NodeCacheResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag NodeCacheResults_BER_Decode(NodeCacheResults* pVal, ByteStream* pByteStrm, int* pErrCode);

/*Sub Structures*/
typedef struct {
    FilterLevelSpec level;
    FilterAddressingList addressing;
    FilterMessageList message;
    struct {
        unsigned int addressing:1;
        unsigned int message:1;
    } exist;
} Filter;

#define Filter_REQUIRED_BYTES_FOR_ENCODING        20
#define Filter_REQUIRED_BITS_FOR_ENCODING        160
#define Filter_REQUIRED_BYTES_FOR_ACN_ENCODING       20
#define Filter_REQUIRED_BITS_FOR_ACN_ENCODING        160
#define Filter_REQUIRED_BYTES_FOR_XER_ENCODING       857


void Filter_Initialize(Filter* pVal);
flag Filter_IsConstraintValid(const Filter* val, int* pErrCode);
flag Filter_XER_Encode(const Filter* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag Filter_XER_Decode(Filter* pVal, ByteStream* pByteStrm, int* pErrCode);
flag Filter_BER_Encode(const Filter* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag Filter_BER_Decode(Filter* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    ZigBeeNetworkAddress nwk_address;
    ZigBeeIEEEAddress ieeeAddress;
    ZigBeeAliasAddress aliasAddress;
    Integer8 active_endpoints;
    SimpleDescriptorList simple_descriptors;
    struct {
        unsigned int aliasAddress:1;
        unsigned int simple_descriptors:1;
    } exist;
} NodeServiceStructure;

#define NodeServiceStructure_REQUIRED_BYTES_FOR_ENCODING        89
#define NodeServiceStructure_REQUIRED_BITS_FOR_ENCODING        705
#define NodeServiceStructure_REQUIRED_BYTES_FOR_ACN_ENCODING       89
#define NodeServiceStructure_REQUIRED_BITS_FOR_ACN_ENCODING        705
#define NodeServiceStructure_REQUIRED_BYTES_FOR_XER_ENCODING       2547


void NodeServiceStructure_Initialize(NodeServiceStructure* pVal);
flag NodeServiceStructure_IsConstraintValid(const NodeServiceStructure* val, int* pErrCode);
flag NodeServiceStructure_XER_Encode(const NodeServiceStructure* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag NodeServiceStructure_XER_Decode(NodeServiceStructure* pVal, ByteStream* pByteStrm, int* pErrCode);
flag NodeServiceStructure_BER_Encode(const NodeServiceStructure* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag NodeServiceStructure_BER_Decode(NodeServiceStructure* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    
    BindingEntry arr[3];
} BindingList;

#define BindingList_REQUIRED_BYTES_FOR_ENCODING        90
#define BindingList_REQUIRED_BITS_FOR_ENCODING        720
#define BindingList_REQUIRED_BYTES_FOR_ACN_ENCODING       90
#define BindingList_REQUIRED_BITS_FOR_ACN_ENCODING        720
#define BindingList_REQUIRED_BYTES_FOR_XER_ENCODING       1716

#ifndef ERR_BindingList 
#define ERR_BindingList		1059 /* (SIZE (3)) */
#endif

void BindingList_Initialize(BindingList* pVal);
flag BindingList_IsConstraintValid(const BindingList* val, int* pErrCode);
flag BindingList_XER_Encode(const BindingList* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag BindingList_XER_Decode(BindingList* pVal, ByteStream* pByteStrm, int* pErrCode);
flag BindingList_BER_Encode(const BindingList* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag BindingList_BER_Decode(BindingList* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    
    GroupEntry arr[3];
} GroupList;

#define GroupList_REQUIRED_BYTES_FOR_ENCODING        18
#define GroupList_REQUIRED_BITS_FOR_ENCODING        144
#define GroupList_REQUIRED_BYTES_FOR_ACN_ENCODING       18
#define GroupList_REQUIRED_BITS_FOR_ACN_ENCODING        144
#define GroupList_REQUIRED_BYTES_FOR_XER_ENCODING       980

#ifndef ERR_GroupList 
#define ERR_GroupList		1060 /* (SIZE (3)) */
#endif

void GroupList_Initialize(GroupList* pVal);
flag GroupList_IsConstraintValid(const GroupList* val, int* pErrCode);
flag GroupList_XER_Encode(const GroupList* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag GroupList_XER_Decode(GroupList* pVal, ByteStream* pByteStrm, int* pErrCode);
flag GroupList_BER_Encode(const GroupList* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag GroupList_BER_Decode(GroupList* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Filter filter;
    Action action;
    struct {
        unsigned int filter:1;
        unsigned int action:1;
    } exist;
} FilterAction;

#define FilterAction_REQUIRED_BYTES_FOR_ENCODING        21
#define FilterAction_REQUIRED_BITS_FOR_ENCODING        167
#define FilterAction_REQUIRED_BYTES_FOR_ACN_ENCODING       21
#define FilterAction_REQUIRED_BITS_FOR_ACN_ENCODING        167
#define FilterAction_REQUIRED_BYTES_FOR_XER_ENCODING       991


void FilterAction_Initialize(FilterAction* pVal);
flag FilterAction_IsConstraintValid(const FilterAction* val, int* pErrCode);
flag FilterAction_XER_Encode(const FilterAction* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag FilterAction_XER_Decode(FilterAction* pVal, ByteStream* pByteStrm, int* pErrCode);
flag FilterAction_BER_Encode(const FilterAction* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag FilterAction_BER_Decode(FilterAction* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Integer16 group_count;
    GroupList group_list;
    struct {
        unsigned int group_count:1;
        unsigned int group_list:1;
    } exist;
} GetGroupListResults;

#define GetGroupListResults_REQUIRED_BYTES_FOR_ENCODING        21
#define GetGroupListResults_REQUIRED_BITS_FOR_ENCODING        162
#define GetGroupListResults_REQUIRED_BYTES_FOR_ACN_ENCODING       21
#define GetGroupListResults_REQUIRED_BITS_FOR_ACN_ENCODING        162
#define GetGroupListResults_REQUIRED_BYTES_FOR_XER_ENCODING       1072


void GetGroupListResults_Initialize(GetGroupListResults* pVal);
flag GetGroupListResults_IsConstraintValid(const GetGroupListResults* val, int* pErrCode);
flag GetGroupListResults_XER_Encode(const GetGroupListResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag GetGroupListResults_XER_Decode(GetGroupListResults* pVal, ByteStream* pByteStrm, int* pErrCode);
flag GetGroupListResults_BER_Encode(const GetGroupListResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag GetGroupListResults_BER_Decode(GetGroupListResults* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Integer16 binding_count;
    BindingList binding_list;
    struct {
        unsigned int binding_count:1;
        unsigned int binding_list:1;
    } exist;
} GetBindingListResults;

#define GetBindingListResults_REQUIRED_BYTES_FOR_ENCODING        93
#define GetBindingListResults_REQUIRED_BITS_FOR_ENCODING        738
#define GetBindingListResults_REQUIRED_BYTES_FOR_ACN_ENCODING       93
#define GetBindingListResults_REQUIRED_BITS_FOR_ACN_ENCODING        738
#define GetBindingListResults_REQUIRED_BYTES_FOR_XER_ENCODING       1816


void GetBindingListResults_Initialize(GetBindingListResults* pVal);
flag GetBindingListResults_IsConstraintValid(const GetBindingListResults* val, int* pErrCode);
flag GetBindingListResults_XER_Encode(const GetBindingListResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag GetBindingListResults_XER_Decode(GetBindingListResults* pVal, ByteStream* pByteStrm, int* pErrCode);
flag GetBindingListResults_BER_Encode(const GetBindingListResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag GetBindingListResults_BER_Decode(GetBindingListResults* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    
    NodeServiceStructure arr[3];
} ServiceInformation;

#define ServiceInformation_REQUIRED_BYTES_FOR_ENCODING        265
#define ServiceInformation_REQUIRED_BITS_FOR_ENCODING        2115
#define ServiceInformation_REQUIRED_BYTES_FOR_ACN_ENCODING       265
#define ServiceInformation_REQUIRED_BITS_FOR_ACN_ENCODING        2115
#define ServiceInformation_REQUIRED_BYTES_FOR_XER_ENCODING       7682

#ifndef ERR_ServiceInformation 
#define ERR_ServiceInformation		1061 /* (SIZE (3)) */
#endif

void ServiceInformation_Initialize(ServiceInformation* pVal);
flag ServiceInformation_IsConstraintValid(const ServiceInformation* val, int* pErrCode);
flag ServiceInformation_XER_Encode(const ServiceInformation* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ServiceInformation_XER_Decode(ServiceInformation* pVal, ByteStream* pByteStrm, int* pErrCode);
flag ServiceInformation_BER_Encode(const ServiceInformation* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ServiceInformation_BER_Decode(ServiceInformation* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    enum {
        StructParams_NONE,
        StructParams_none_PRESENT,
        get_params_PRESENT,
        set_params_PRESENT,
        filter_action_PRESENT,
        updateTimeout_PRESENT,
        start_nodeDiscovery_PRESENT,
        nodeLeave_event_PRESENT,
        startServiceDiscovery_PRESENT,
        nodeDiscovery_event_PRESENT,
        service_discovery_event_PRESENT,
        startGatewayDevice_PRESENT,
        configureStartupAttributeSet_PRESENT,
        create_AliasAddress_PRESENT,
        list_addresses_PRESENT,
        zdp_command_PRESENT,
        zdp_event_PRESENT,
        zcl_command_PRESENT,
        zcl_event_PRESENT,
        configure_node_descriptor_PRESENT,
        configure_endpoint_PRESENT,
        aps_command_PRESENT,
        aps_event_PRESENT,
        addGroup_PRESENT,
        removeGroup_PRESENT,
        interPAN_command_PRESENT,
        notifyInterPANMessage_event_PRESENT,
        formNetwork_params_PRESENT,
        startRouter_params_PRESENT,
        join_params_PRESENT,
        leave_params_PRESENT,
        discoverNetworks_params_PRESENT,
        discoverNetworks_event_PRESENT,
        performEnergyScan_params_PRESENT,
        networkStatus_event_PRESENT,
        performEnergyScan_event_PRESENT,
        performRouteDiscovery_params_PRESENT,
        performRouteDiscovery_event_PRESENT,
        sendNWKMessage_params_PRESENT,
        notifyNWKMessage_event_PRESENT 
    } kind;
    union {
        NullType none;
        GetParams get_params;
        SetParams set_params;
        FilterAction filter_action;
        UpdateTimeoutParams updateTimeout;
        StartNodeDiscoveryParams start_nodeDiscovery;
        NodeLeaveEventParams nodeLeave_event;
        DestinationAddress startServiceDiscovery;
        NodeDiscoveryEventParams nodeDiscovery_event;
        ServiceDiscoveryEventParams service_discovery_event;
        GatewayStartParams startGatewayDevice;
        GatewayStartParams configureStartupAttributeSet;
        CreateAliasAddressParams create_AliasAddress;
        ListAddressesParams list_addresses;
        ZDPCommandParams zdp_command;
        ZDPCommandResults zdp_event;
        ZCLCommandParams zcl_command;
        ZCLCommandResults zcl_event;
        NodeDescriptor configure_node_descriptor;
        ConfigureEndpointParams configure_endpoint;
        APSCommandParams aps_command;
        NotifyAPSMessageEventParams aps_event;
        GroupParams addGroup;
        GroupParams removeGroup;
        SendInterPANMessageParams interPAN_command;
        NotifyInterPANMessageEventParams notifyInterPANMessage_event;
        FormNetworkParams formNetwork_params;
        StartRouterParams startRouter_params;
        JoinParams join_params;
        LeaveParams leave_params;
        DiscoverNetworksParams discoverNetworks_params;
        DiscoverNetworksResults discoverNetworks_event;
        DiscoverNetworksParams performEnergyScan_params;
        NetworkStatusEventParams networkStatus_event;
        PerformEnergyScanResults performEnergyScan_event;
        PerformRouteDiscoveryParams performRouteDiscovery_params;
        PerformRouteDiscoveryResults performRouteDiscovery_event;
        SendNWKMessageParams sendNWKMessage_params;
        NotifyNWKMessageEventParams notifyNWKMessage_event;
    } u; 
} StructParams;

#define StructParams_REQUIRED_BYTES_FOR_ENCODING        98
#define StructParams_REQUIRED_BITS_FOR_ENCODING        778
#define StructParams_REQUIRED_BYTES_FOR_ACN_ENCODING       98
#define StructParams_REQUIRED_BITS_FOR_ACN_ENCODING        778
#define StructParams_REQUIRED_BYTES_FOR_XER_ENCODING       2622

#ifndef ERR_StructParams_unknown_choice_index 
#define ERR_StructParams_unknown_choice_index		1062 /*  */
#endif

void StructParams_Initialize(StructParams* pVal);
flag StructParams_IsConstraintValid(const StructParams* val, int* pErrCode);
flag StructParams_XER_Encode(const StructParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag StructParams_XER_Decode(StructParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag StructParams_BER_Encode(const StructParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag StructParams_BER_Decode(StructParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    Integer8 number_nodes;
    ServiceInformation service_info;
} ReadServiceCacheResults;

#define ReadServiceCacheResults_REQUIRED_BYTES_FOR_ENCODING        266
#define ReadServiceCacheResults_REQUIRED_BITS_FOR_ENCODING        2123
#define ReadServiceCacheResults_REQUIRED_BYTES_FOR_ACN_ENCODING       266
#define ReadServiceCacheResults_REQUIRED_BITS_FOR_ACN_ENCODING        2123
#define ReadServiceCacheResults_REQUIRED_BYTES_FOR_XER_ENCODING       7770


void ReadServiceCacheResults_Initialize(ReadServiceCacheResults* pVal);
flag ReadServiceCacheResults_IsConstraintValid(const ReadServiceCacheResults* val, int* pErrCode);
flag ReadServiceCacheResults_XER_Encode(const ReadServiceCacheResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ReadServiceCacheResults_XER_Decode(ReadServiceCacheResults* pVal, ByteStream* pByteStrm, int* pErrCode);
flag ReadServiceCacheResults_BER_Encode(const ReadServiceCacheResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ReadServiceCacheResults_BER_Decode(ReadServiceCacheResults* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    enum {
        DataParams_NONE,
        DataParams_voidNull_PRESENT,
        DataParams_simple_type_PRESENT,
        structParam_PRESENT 
    } kind;
    union {
        NullType voidNull;
        SimpleType simple_type;
        StructParams structParam;
    } u; 
} DataParams;

#define DataParams_REQUIRED_BYTES_FOR_ENCODING        98
#define DataParams_REQUIRED_BITS_FOR_ENCODING        780
#define DataParams_REQUIRED_BYTES_FOR_ACN_ENCODING       98
#define DataParams_REQUIRED_BITS_FOR_ACN_ENCODING        780
#define DataParams_REQUIRED_BYTES_FOR_XER_ENCODING       2645

#ifndef ERR_DataParams_unknown_choice_index 
#define ERR_DataParams_unknown_choice_index		1063 /*  */
#endif

void DataParams_Initialize(DataParams* pVal);
flag DataParams_IsConstraintValid(const DataParams* val, int* pErrCode);
flag DataParams_XER_Encode(const DataParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag DataParams_XER_Decode(DataParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag DataParams_BER_Encode(const DataParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag DataParams_BER_Decode(DataParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    enum {
        StructResults_NONE,
        StructResults_voidNull_PRESENT,
        getVersion_results_PRESENT,
        listCallbacks_results_PRESENT,
        pollcallback_results_PRESENT,
        nodecache_results_PRESENT,
        readservicecache_results_PRESENT,
        read_startupAttributeSet_PRESENT,
        list_addresses_results_PRESENT,
        zdp_results_PRESENT,
        zcl_results_PRESENT,
        get_node_descriptor_PRESENT,
        get_node_power_descriptor_PRESENT,
        sendAPSMessage_results_PRESENT,
        getGroupList_results_PRESENT,
        getBindingList_results_PRESENT,
        intrPAN_results_PRESENT,
        discoverNetworks_results_PRESENT,
        performEnergyScan_results_PRESENT,
        performRouteDiscovery_results_PRESENT,
        sendNWKMessage_results_PRESENT 
    } kind;
    union {
        NullType voidNull;
        GetVersionResults getVersion_results;
        ListCallbacksResults listCallbacks_results;
        PollCallbackResults pollcallback_results;
        NodeCacheResults nodecache_results;
        ReadServiceCacheResults readservicecache_results;
        StartupAttributeSet read_startupAttributeSet;
        ListAddressesResults list_addresses_results;
        ZDPCommandResults zdp_results;
        ZCLCommandResults zcl_results;
        NodeDescriptor get_node_descriptor;
        NodePowerDescriptor get_node_power_descriptor;
        APSCommandResults sendAPSMessage_results;
        GetGroupListResults getGroupList_results;
        GetBindingListResults getBindingList_results;
        INTRPANCommandResults intrPAN_results;
        DiscoverNetworksResults discoverNetworks_results;
        PerformEnergyScanResults performEnergyScan_results;
        PerformRouteDiscoveryResults performRouteDiscovery_results;
        SendNWKMessageResults sendNWKMessage_results;
    } u; 
} StructResults;

#define StructResults_REQUIRED_BYTES_FOR_ENCODING        266
#define StructResults_REQUIRED_BITS_FOR_ENCODING        2128
#define StructResults_REQUIRED_BYTES_FOR_ACN_ENCODING       266
#define StructResults_REQUIRED_BITS_FOR_ACN_ENCODING        2128
#define StructResults_REQUIRED_BYTES_FOR_XER_ENCODING       7803

#ifndef ERR_StructResults_unknown_choice_index 
#define ERR_StructResults_unknown_choice_index		1064 /*  */
#endif

void StructResults_Initialize(StructResults* pVal);
flag StructResults_IsConstraintValid(const StructResults* val, int* pErrCode);
flag StructResults_XER_Encode(const StructResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag StructResults_XER_Decode(StructResults* pVal, ByteStream* pByteStrm, int* pErrCode);
flag StructResults_BER_Encode(const StructResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag StructResults_BER_Decode(StructResults* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    GeneralProcParams g_params;
    DataParams d_params;
} ProcedureParams;

#define ProcedureParams_REQUIRED_BYTES_FOR_ENCODING        117
#define ProcedureParams_REQUIRED_BITS_FOR_ENCODING        935
#define ProcedureParams_REQUIRED_BYTES_FOR_ACN_ENCODING       119
#define ProcedureParams_REQUIRED_BITS_FOR_ACN_ENCODING        947
#define ProcedureParams_REQUIRED_BYTES_FOR_XER_ENCODING       2830


void ProcedureParams_Initialize(ProcedureParams* pVal);
flag ProcedureParams_IsConstraintValid(const ProcedureParams* val, int* pErrCode);
flag ProcedureParams_XER_Encode(const ProcedureParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ProcedureParams_XER_Decode(ProcedureParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag ProcedureParams_BER_Encode(const ProcedureParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ProcedureParams_BER_Decode(ProcedureParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    GeneralEvthParams g_params;
    DataParams d_params;
} EvtHandlerParams;

#define EvtHandlerParams_REQUIRED_BYTES_FOR_ENCODING        103
#define EvtHandlerParams_REQUIRED_BITS_FOR_ENCODING        823
#define EvtHandlerParams_REQUIRED_BYTES_FOR_ACN_ENCODING       103
#define EvtHandlerParams_REQUIRED_BITS_FOR_ACN_ENCODING        823
#define EvtHandlerParams_REQUIRED_BYTES_FOR_XER_ENCODING       2818


void EvtHandlerParams_Initialize(EvtHandlerParams* pVal);
flag EvtHandlerParams_IsConstraintValid(const EvtHandlerParams* val, int* pErrCode);
flag EvtHandlerParams_XER_Encode(const EvtHandlerParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag EvtHandlerParams_XER_Decode(EvtHandlerParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag EvtHandlerParams_BER_Encode(const EvtHandlerParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag EvtHandlerParams_BER_Decode(EvtHandlerParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    enum {
        DataResults_NONE,
        DataResults_voidNull_PRESENT,
        DataResults_simple_type_PRESENT,
        structRes_PRESENT 
    } kind;
    union {
        NullType voidNull;
        SimpleType simple_type;
        StructResults structRes;
    } u; 
} DataResults;

#define DataResults_REQUIRED_BYTES_FOR_ENCODING        267
#define DataResults_REQUIRED_BITS_FOR_ENCODING        2130
#define DataResults_REQUIRED_BYTES_FOR_ACN_ENCODING       267
#define DataResults_REQUIRED_BITS_FOR_ACN_ENCODING        2130
#define DataResults_REQUIRED_BYTES_FOR_XER_ENCODING       7822

#ifndef ERR_DataResults_unknown_choice_index 
#define ERR_DataResults_unknown_choice_index		1065 /*  */
#endif

void DataResults_Initialize(DataResults* pVal);
flag DataResults_IsConstraintValid(const DataResults* val, int* pErrCode);
flag DataResults_XER_Encode(const DataResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag DataResults_XER_Decode(DataResults* pVal, ByteStream* pByteStrm, int* pErrCode);
flag DataResults_BER_Encode(const DataResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag DataResults_BER_Decode(DataResults* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    enum {
        FunctionParams_NONE,
        proc_params_PRESENT,
        evth_params_PRESENT 
    } kind;
    union {
        ProcedureParams proc_params;
        EvtHandlerParams evth_params;
    } u; 
} FunctionParams;

#define FunctionParams_REQUIRED_BYTES_FOR_ENCODING        117
#define FunctionParams_REQUIRED_BITS_FOR_ENCODING        936
#define FunctionParams_REQUIRED_BYTES_FOR_ACN_ENCODING       119
#define FunctionParams_REQUIRED_BITS_FOR_ACN_ENCODING        948
#define FunctionParams_REQUIRED_BYTES_FOR_XER_ENCODING       2855

#ifndef ERR_FunctionParams_unknown_choice_index 
#define ERR_FunctionParams_unknown_choice_index		1066 /*  */
#endif

void FunctionParams_Initialize(FunctionParams* pVal);
flag FunctionParams_IsConstraintValid(const FunctionParams* val, int* pErrCode);
flag FunctionParams_XER_Encode(const FunctionParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag FunctionParams_XER_Decode(FunctionParams* pVal, ByteStream* pByteStrm, int* pErrCode);
flag FunctionParams_BER_Encode(const FunctionParams* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag FunctionParams_BER_Decode(FunctionParams* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    GeneralProcResults g_results;
    DataResults d_results;
} ProcedureResults;

#define ProcedureResults_REQUIRED_BYTES_FOR_ENCODING        272
#define ProcedureResults_REQUIRED_BITS_FOR_ENCODING        2171
#define ProcedureResults_REQUIRED_BYTES_FOR_ACN_ENCODING       272
#define ProcedureResults_REQUIRED_BITS_FOR_ACN_ENCODING        2171
#define ProcedureResults_REQUIRED_BYTES_FOR_XER_ENCODING       7985


void ProcedureResults_Initialize(ProcedureResults* pVal);
flag ProcedureResults_IsConstraintValid(const ProcedureResults* val, int* pErrCode);
flag ProcedureResults_XER_Encode(const ProcedureResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ProcedureResults_XER_Decode(ProcedureResults* pVal, ByteStream* pByteStrm, int* pErrCode);
flag ProcedureResults_BER_Encode(const ProcedureResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag ProcedureResults_BER_Decode(ProcedureResults* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    GeneralEvthResults g_results;
    DataResults d_results;
} EvtHandlerResults;

#define EvtHandlerResults_REQUIRED_BYTES_FOR_ENCODING        268
#define EvtHandlerResults_REQUIRED_BITS_FOR_ENCODING        2138
#define EvtHandlerResults_REQUIRED_BYTES_FOR_ACN_ENCODING       268
#define EvtHandlerResults_REQUIRED_BITS_FOR_ACN_ENCODING        2138
#define EvtHandlerResults_REQUIRED_BYTES_FOR_XER_ENCODING       7900


void EvtHandlerResults_Initialize(EvtHandlerResults* pVal);
flag EvtHandlerResults_IsConstraintValid(const EvtHandlerResults* val, int* pErrCode);
flag EvtHandlerResults_XER_Encode(const EvtHandlerResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag EvtHandlerResults_XER_Decode(EvtHandlerResults* pVal, ByteStream* pByteStrm, int* pErrCode);
flag EvtHandlerResults_BER_Encode(const EvtHandlerResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag EvtHandlerResults_BER_Decode(EvtHandlerResults* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    enum {
        FunctionResults_NONE,
        proc_results_PRESENT,
        evth_results_PRESENT 
    } kind;
    union {
        ProcedureResults proc_results;
        EvtHandlerResults evth_results;
    } u; 
} FunctionResults;

#define FunctionResults_REQUIRED_BYTES_FOR_ENCODING        272
#define FunctionResults_REQUIRED_BITS_FOR_ENCODING        2172
#define FunctionResults_REQUIRED_BYTES_FOR_ACN_ENCODING       272
#define FunctionResults_REQUIRED_BITS_FOR_ACN_ENCODING        2172
#define FunctionResults_REQUIRED_BYTES_FOR_XER_ENCODING       8012

#ifndef ERR_FunctionResults_unknown_choice_index 
#define ERR_FunctionResults_unknown_choice_index		1067 /*  */
#endif

void FunctionResults_Initialize(FunctionResults* pVal);
flag FunctionResults_IsConstraintValid(const FunctionResults* val, int* pErrCode);
flag FunctionResults_XER_Encode(const FunctionResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag FunctionResults_XER_Decode(FunctionResults* pVal, ByteStream* pByteStrm, int* pErrCode);
flag FunctionResults_BER_Encode(const FunctionResults* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag FunctionResults_BER_Decode(FunctionResults* pVal, ByteStream* pByteStrm, int* pErrCode);

typedef struct {
    enum {
        FunctionCall_NONE,
        parameters_PRESENT,
        results_PRESENT 
    } kind;
    union {
        FunctionParams parameters;
        FunctionResults results;
    } u; 
} FunctionCall;

#define FunctionCall_REQUIRED_BYTES_FOR_ENCODING        272
#define FunctionCall_REQUIRED_BITS_FOR_ENCODING        2173
#define FunctionCall_REQUIRED_BYTES_FOR_ACN_ENCODING       272
#define FunctionCall_REQUIRED_BITS_FOR_ACN_ENCODING        2173
#define FunctionCall_REQUIRED_BYTES_FOR_XER_ENCODING       8025

#ifndef ERR_FunctionCall_unknown_choice_index 
#define ERR_FunctionCall_unknown_choice_index		1068 /*  */
#endif

void FunctionCall_Initialize(FunctionCall* pVal);
flag FunctionCall_IsConstraintValid(const FunctionCall* val, int* pErrCode);
flag FunctionCall_XER_Encode(const FunctionCall* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag FunctionCall_XER_Decode(FunctionCall* pVal, ByteStream* pByteStrm, int* pErrCode);
flag FunctionCall_BER_Encode(const FunctionCall* val, ByteStream* pByteStrm, int* pErrCode, flag bCheckConstraints);
flag FunctionCall_BER_Decode(FunctionCall* pVal, ByteStream* pByteStrm, int* pErrCode);


#ifdef  __cplusplus
}
#define ENUM_mac_level	mac_level
#define ENUM_nwk_level	nwk_level
#define ENUM_intrp_level	intrp_level
#define ENUM_aps_level	aps_level
#define ENUM_decodeMACBit	decodeMACBit
#define ENUM_decodeNWKBit	decodeNWKBit
#define ENUM_decodeInterPANBit	decodeInterPANBit
#define ENUM_decodeAPSBit	decodeAPSBit
#define ENUM_decodeZCLBit	decodeZCLBit
#define ENUM_decodeZDPBit	decodeZDPBit
#define ENUM_polled	polled
#define ENUM_grip	grip
#define ENUM_soap	soap
#define ENUM_rest	rest
#define ENUM_all	all
#define ENUM_zdp	zdp
#define ENUM_zcl	zcl
#define ENUM_discovery	discovery
#define ENUM_binding	binding
#define ENUM_network_management	network_management
#define ENUM_keepChildren	keepChildren
#define ENUM_removeChildren	removeChildren
#define ENUM_no_rejoin	no_rejoin
#define ENUM_rejoin	rejoin
#define ENUM_currentDevice	currentDevice
#define ENUM_zc	zc
#define ENUM_zr	zr
#define ENUM_zed	zed
#define ENUM_coordinator	NodeDescriptor::coordinator
#define ENUM_router	NodeDescriptor::router
#define ENUM_endDevice	NodeDescriptor::endDevice
#define ENUM_synchronized	NodePowerDescriptor::synchronized
#define ENUM_seriodic	NodePowerDescriptor::seriodic
#define ENUM_stimulated	NodePowerDescriptor::stimulated
#define ENUM_myCritical	NodePowerDescriptor::myCritical
#define ENUM_percent33	NodePowerDescriptor::percent33
#define ENUM_percent66	NodePowerDescriptor::percent66
#define ENUM_percent100	NodePowerDescriptor::percent100
#define CHOICE_parameters_PRESENT	FunctionCall::parameters_PRESENT
#define CHOICE_results_PRESENT	FunctionCall::results_PRESENT
#define CHOICE_proc_params_PRESENT	FunctionParams::proc_params_PRESENT
#define CHOICE_evth_params_PRESENT	FunctionParams::evth_params_PRESENT
#define CHOICE_GeneralProcParams_none_PRESENT	GeneralProcParams::GeneralProcParams_none_PRESENT
#define CHOICE_timeout_PRESENT	GeneralProcParams::timeout_PRESENT
#define CHOICE_with_callback_PRESENT	GeneralProcParams::with_callback_PRESENT
#define CHOICE_GeneralEvthParams_status_PRESENT	GeneralEvthParams::GeneralEvthParams_status_PRESENT
#define CHOICE_request_id_PRESENT	GeneralEvthParams::request_id_PRESENT
#define CHOICE_GeneralEvthParams_with_reqId_PRESENT	GeneralEvthParams::GeneralEvthParams_with_reqId_PRESENT
#define CHOICE_callback_id_PRESENT	GeneralEvthParams::callback_id_PRESENT
#define CHOICE_with_callbackid_PRESENT	GeneralEvthParams::with_callbackid_PRESENT
#define CHOICE_proc_results_PRESENT	FunctionResults::proc_results_PRESENT
#define CHOICE_evth_results_PRESENT	FunctionResults::evth_results_PRESENT
#define CHOICE_GeneralProcResults_status_PRESENT	GeneralProcResults::GeneralProcResults_status_PRESENT
#define CHOICE_GeneralProcResults_with_reqId_PRESENT	GeneralProcResults::GeneralProcResults_with_reqId_PRESENT
#define CHOICE_DataParams_voidNull_PRESENT	DataParams::DataParams_voidNull_PRESENT
#define CHOICE_DataParams_simple_type_PRESENT	DataParams::DataParams_simple_type_PRESENT
#define CHOICE_structParam_PRESENT	DataParams::structParam_PRESENT
#define CHOICE_integer8_PRESENT	SimpleType::integer8_PRESENT
#define CHOICE_integer16_PRESENT	SimpleType::integer16_PRESENT
#define CHOICE_integer32_PRESENT	SimpleType::integer32_PRESENT
#define CHOICE_flag_PRESENT	SimpleType::flag_PRESENT
#define CHOICE_octetString_PRESENT	SimpleType::octetString_PRESENT
#define CHOICE_StructParams_none_PRESENT	StructParams::StructParams_none_PRESENT
#define CHOICE_get_params_PRESENT	StructParams::get_params_PRESENT
#define CHOICE_set_params_PRESENT	StructParams::set_params_PRESENT
#define CHOICE_filter_action_PRESENT	StructParams::filter_action_PRESENT
#define CHOICE_updateTimeout_PRESENT	StructParams::updateTimeout_PRESENT
#define CHOICE_start_nodeDiscovery_PRESENT	StructParams::start_nodeDiscovery_PRESENT
#define CHOICE_nodeLeave_event_PRESENT	StructParams::nodeLeave_event_PRESENT
#define CHOICE_startServiceDiscovery_PRESENT	StructParams::startServiceDiscovery_PRESENT
#define CHOICE_nodeDiscovery_event_PRESENT	StructParams::nodeDiscovery_event_PRESENT
#define CHOICE_service_discovery_event_PRESENT	StructParams::service_discovery_event_PRESENT
#define CHOICE_startGatewayDevice_PRESENT	StructParams::startGatewayDevice_PRESENT
#define CHOICE_configureStartupAttributeSet_PRESENT	StructParams::configureStartupAttributeSet_PRESENT
#define CHOICE_create_AliasAddress_PRESENT	StructParams::create_AliasAddress_PRESENT
#define CHOICE_list_addresses_PRESENT	StructParams::list_addresses_PRESENT
#define CHOICE_zdp_command_PRESENT	StructParams::zdp_command_PRESENT
#define CHOICE_zdp_event_PRESENT	StructParams::zdp_event_PRESENT
#define CHOICE_zcl_command_PRESENT	StructParams::zcl_command_PRESENT
#define CHOICE_zcl_event_PRESENT	StructParams::zcl_event_PRESENT
#define CHOICE_configure_node_descriptor_PRESENT	StructParams::configure_node_descriptor_PRESENT
#define CHOICE_configure_endpoint_PRESENT	StructParams::configure_endpoint_PRESENT
#define CHOICE_aps_command_PRESENT	StructParams::aps_command_PRESENT
#define CHOICE_aps_event_PRESENT	StructParams::aps_event_PRESENT
#define CHOICE_addGroup_PRESENT	StructParams::addGroup_PRESENT
#define CHOICE_removeGroup_PRESENT	StructParams::removeGroup_PRESENT
#define CHOICE_interPAN_command_PRESENT	StructParams::interPAN_command_PRESENT
#define CHOICE_notifyInterPANMessage_event_PRESENT	StructParams::notifyInterPANMessage_event_PRESENT
#define CHOICE_formNetwork_params_PRESENT	StructParams::formNetwork_params_PRESENT
#define CHOICE_startRouter_params_PRESENT	StructParams::startRouter_params_PRESENT
#define CHOICE_join_params_PRESENT	StructParams::join_params_PRESENT
#define CHOICE_leave_params_PRESENT	StructParams::leave_params_PRESENT
#define CHOICE_discoverNetworks_params_PRESENT	StructParams::discoverNetworks_params_PRESENT
#define CHOICE_discoverNetworks_event_PRESENT	StructParams::discoverNetworks_event_PRESENT
#define CHOICE_performEnergyScan_params_PRESENT	StructParams::performEnergyScan_params_PRESENT
#define CHOICE_networkStatus_event_PRESENT	StructParams::networkStatus_event_PRESENT
#define CHOICE_performEnergyScan_event_PRESENT	StructParams::performEnergyScan_event_PRESENT
#define CHOICE_performRouteDiscovery_params_PRESENT	StructParams::performRouteDiscovery_params_PRESENT
#define CHOICE_performRouteDiscovery_event_PRESENT	StructParams::performRouteDiscovery_event_PRESENT
#define CHOICE_sendNWKMessage_params_PRESENT	StructParams::sendNWKMessage_params_PRESENT
#define CHOICE_notifyNWKMessage_event_PRESENT	StructParams::notifyNWKMessage_event_PRESENT
#define CHOICE_DataResults_voidNull_PRESENT	DataResults::DataResults_voidNull_PRESENT
#define CHOICE_DataResults_simple_type_PRESENT	DataResults::DataResults_simple_type_PRESENT
#define CHOICE_structRes_PRESENT	DataResults::structRes_PRESENT
#define CHOICE_StructResults_voidNull_PRESENT	StructResults::StructResults_voidNull_PRESENT
#define CHOICE_getVersion_results_PRESENT	StructResults::getVersion_results_PRESENT
#define CHOICE_listCallbacks_results_PRESENT	StructResults::listCallbacks_results_PRESENT
#define CHOICE_pollcallback_results_PRESENT	StructResults::pollcallback_results_PRESENT
#define CHOICE_nodecache_results_PRESENT	StructResults::nodecache_results_PRESENT
#define CHOICE_readservicecache_results_PRESENT	StructResults::readservicecache_results_PRESENT
#define CHOICE_read_startupAttributeSet_PRESENT	StructResults::read_startupAttributeSet_PRESENT
#define CHOICE_list_addresses_results_PRESENT	StructResults::list_addresses_results_PRESENT
#define CHOICE_zdp_results_PRESENT	StructResults::zdp_results_PRESENT
#define CHOICE_zcl_results_PRESENT	StructResults::zcl_results_PRESENT
#define CHOICE_get_node_descriptor_PRESENT	StructResults::get_node_descriptor_PRESENT
#define CHOICE_get_node_power_descriptor_PRESENT	StructResults::get_node_power_descriptor_PRESENT
#define CHOICE_sendAPSMessage_results_PRESENT	StructResults::sendAPSMessage_results_PRESENT
#define CHOICE_getGroupList_results_PRESENT	StructResults::getGroupList_results_PRESENT
#define CHOICE_getBindingList_results_PRESENT	StructResults::getBindingList_results_PRESENT
#define CHOICE_intrPAN_results_PRESENT	StructResults::intrPAN_results_PRESENT
#define CHOICE_discoverNetworks_results_PRESENT	StructResults::discoverNetworks_results_PRESENT
#define CHOICE_performEnergyScan_results_PRESENT	StructResults::performEnergyScan_results_PRESENT
#define CHOICE_performRouteDiscovery_results_PRESENT	StructResults::performRouteDiscovery_results_PRESENT
#define CHOICE_sendNWKMessage_results_PRESENT	StructResults::sendNWKMessage_results_PRESENT
#define CHOICE_null_PRESENT	ListAddressesParams::null_PRESENT
#define CHOICE_nwk_address_PRESENT	ListAddressesParams::nwk_address_PRESENT
#define CHOICE_ieeeAddress_PRESENT	ListAddressesParams::ieeeAddress_PRESENT
#define CHOICE_aliasAddress_PRESENT	ListAddressesParams::aliasAddress_PRESENT
#define CHOICE_cluster_id_PRESENT	FilterMessage::cluster_id_PRESENT
#define CHOICE_cluster_group_PRESENT	FilterMessage::cluster_group_PRESENT
#define CHOICE_alias_address_PRESENT	DestinationAddress::alias_address_PRESENT
#define CHOICE_short_address_PRESENT	DestinationAddress::short_address_PRESENT
#define CHOICE_ieee_address_PRESENT	DestinationAddress::ieee_address_PRESENT
#endif

#endif
